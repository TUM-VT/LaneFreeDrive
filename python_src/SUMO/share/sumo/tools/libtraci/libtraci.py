# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libtraci')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libtraci')
    _libtraci = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libtraci', [dirname(__file__)])
        except ImportError:
            import _libtraci
            return _libtraci
        try:
            _mod = imp.load_module('_libtraci', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libtraci = swig_import_helper()
    del swig_import_helper
else:
    import _libtraci
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

LIBTRACI = _libtraci.LIBTRACI
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libtraci.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libtraci.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libtraci.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libtraci.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libtraci.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libtraci.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libtraci.SwigPyIterator_copy(self)

    def next(self):
        return _libtraci.SwigPyIterator_next(self)

    def __next__(self):
        return _libtraci.SwigPyIterator___next__(self)

    def previous(self):
        return _libtraci.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libtraci.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libtraci.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libtraci.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libtraci.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libtraci.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libtraci.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libtraci.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libtraci.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.StringVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.StringVector___bool__(self)

    def __len__(self):
        return _libtraci.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.StringVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.StringVector_pop(self)

    def append(self, x):
        return _libtraci.StringVector_append(self, x)

    def empty(self):
        return _libtraci.StringVector_empty(self)

    def size(self):
        return _libtraci.StringVector_size(self)

    def swap(self, v):
        return _libtraci.StringVector_swap(self, v)

    def begin(self):
        return _libtraci.StringVector_begin(self)

    def end(self):
        return _libtraci.StringVector_end(self)

    def rbegin(self):
        return _libtraci.StringVector_rbegin(self)

    def rend(self):
        return _libtraci.StringVector_rend(self)

    def clear(self):
        return _libtraci.StringVector_clear(self)

    def get_allocator(self):
        return _libtraci.StringVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.StringVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.StringVector_push_back(self, x)

    def front(self):
        return _libtraci.StringVector_front(self)

    def back(self):
        return _libtraci.StringVector_back(self)

    def assign(self, n, x):
        return _libtraci.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.StringVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.StringVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.StringVector_reserve(self, n)

    def capacity(self):
        return _libtraci.StringVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _libtraci.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.IntVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.IntVector___bool__(self)

    def __len__(self):
        return _libtraci.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.IntVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.IntVector_pop(self)

    def append(self, x):
        return _libtraci.IntVector_append(self, x)

    def empty(self):
        return _libtraci.IntVector_empty(self)

    def size(self):
        return _libtraci.IntVector_size(self)

    def swap(self, v):
        return _libtraci.IntVector_swap(self, v)

    def begin(self):
        return _libtraci.IntVector_begin(self)

    def end(self):
        return _libtraci.IntVector_end(self)

    def rbegin(self):
        return _libtraci.IntVector_rbegin(self)

    def rend(self):
        return _libtraci.IntVector_rend(self)

    def clear(self):
        return _libtraci.IntVector_clear(self)

    def get_allocator(self):
        return _libtraci.IntVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.IntVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.IntVector_push_back(self, x)

    def front(self):
        return _libtraci.IntVector_front(self)

    def back(self):
        return _libtraci.IntVector_back(self)

    def assign(self, n, x):
        return _libtraci.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.IntVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.IntVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.IntVector_reserve(self, n)

    def capacity(self):
        return _libtraci.IntVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _libtraci.IntVector_swigregister
IntVector_swigregister(IntVector)

class TraCIException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIException, name)
    __repr__ = _swig_repr

    def __init__(self, what):
        this = _libtraci.new_TraCIException(what)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIException
    __del__ = lambda self: None
TraCIException_swigregister = _libtraci.TraCIException_swigregister
TraCIException_swigregister(TraCIException)

class TraCIResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIResult, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libtraci.delete_TraCIResult
    __del__ = lambda self: None

    def getString(self):
        return _libtraci.TraCIResult_getString(self)

    def __init__(self):
        this = _libtraci.new_TraCIResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
TraCIResult_swigregister = _libtraci.TraCIResult_swigregister
TraCIResult_swigregister(TraCIResult)

class TraCIPosition(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPosition, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPosition, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCIPosition_getString(self)
    __swig_setmethods__["x"] = _libtraci.TraCIPosition_x_set
    __swig_getmethods__["x"] = _libtraci.TraCIPosition_x_get
    if _newclass:
        x = _swig_property(_libtraci.TraCIPosition_x_get, _libtraci.TraCIPosition_x_set)
    __swig_setmethods__["y"] = _libtraci.TraCIPosition_y_set
    __swig_getmethods__["y"] = _libtraci.TraCIPosition_y_get
    if _newclass:
        y = _swig_property(_libtraci.TraCIPosition_y_get, _libtraci.TraCIPosition_y_set)
    __swig_setmethods__["z"] = _libtraci.TraCIPosition_z_set
    __swig_getmethods__["z"] = _libtraci.TraCIPosition_z_get
    if _newclass:
        z = _swig_property(_libtraci.TraCIPosition_z_get, _libtraci.TraCIPosition_z_set)

    def __init__(self):
        this = _libtraci.new_TraCIPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIPosition
    __del__ = lambda self: None
TraCIPosition_swigregister = _libtraci.TraCIPosition_swigregister
TraCIPosition_swigregister(TraCIPosition)

class TraCIRoadPosition(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIRoadPosition, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIRoadPosition, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCIRoadPosition_getString(self)
    __swig_setmethods__["edgeID"] = _libtraci.TraCIRoadPosition_edgeID_set
    __swig_getmethods__["edgeID"] = _libtraci.TraCIRoadPosition_edgeID_get
    if _newclass:
        edgeID = _swig_property(_libtraci.TraCIRoadPosition_edgeID_get, _libtraci.TraCIRoadPosition_edgeID_set)
    __swig_setmethods__["pos"] = _libtraci.TraCIRoadPosition_pos_set
    __swig_getmethods__["pos"] = _libtraci.TraCIRoadPosition_pos_get
    if _newclass:
        pos = _swig_property(_libtraci.TraCIRoadPosition_pos_get, _libtraci.TraCIRoadPosition_pos_set)
    __swig_setmethods__["laneIndex"] = _libtraci.TraCIRoadPosition_laneIndex_set
    __swig_getmethods__["laneIndex"] = _libtraci.TraCIRoadPosition_laneIndex_get
    if _newclass:
        laneIndex = _swig_property(_libtraci.TraCIRoadPosition_laneIndex_get, _libtraci.TraCIRoadPosition_laneIndex_set)

    def __init__(self):
        this = _libtraci.new_TraCIRoadPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIRoadPosition
    __del__ = lambda self: None
TraCIRoadPosition_swigregister = _libtraci.TraCIRoadPosition_swigregister
TraCIRoadPosition_swigregister(TraCIRoadPosition)

class TraCIColor(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIColor, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIColor_getString(self)
    __swig_setmethods__["r"] = _libtraci.TraCIColor_r_set
    __swig_getmethods__["r"] = _libtraci.TraCIColor_r_get
    if _newclass:
        r = _swig_property(_libtraci.TraCIColor_r_get, _libtraci.TraCIColor_r_set)
    __swig_setmethods__["g"] = _libtraci.TraCIColor_g_set
    __swig_getmethods__["g"] = _libtraci.TraCIColor_g_get
    if _newclass:
        g = _swig_property(_libtraci.TraCIColor_g_get, _libtraci.TraCIColor_g_set)
    __swig_setmethods__["b"] = _libtraci.TraCIColor_b_set
    __swig_getmethods__["b"] = _libtraci.TraCIColor_b_get
    if _newclass:
        b = _swig_property(_libtraci.TraCIColor_b_get, _libtraci.TraCIColor_b_set)
    __swig_setmethods__["a"] = _libtraci.TraCIColor_a_set
    __swig_getmethods__["a"] = _libtraci.TraCIColor_a_get
    if _newclass:
        a = _swig_property(_libtraci.TraCIColor_a_get, _libtraci.TraCIColor_a_set)
    __swig_destroy__ = _libtraci.delete_TraCIColor
    __del__ = lambda self: None
TraCIColor_swigregister = _libtraci.TraCIColor_swigregister
TraCIColor_swigregister(TraCIColor)

class TraCILeaderDistance(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILeaderDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILeaderDistance, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCILeaderDistance_getString(self)
    __swig_setmethods__["leaderID"] = _libtraci.TraCILeaderDistance_leaderID_set
    __swig_getmethods__["leaderID"] = _libtraci.TraCILeaderDistance_leaderID_get
    if _newclass:
        leaderID = _swig_property(_libtraci.TraCILeaderDistance_leaderID_get, _libtraci.TraCILeaderDistance_leaderID_set)
    __swig_setmethods__["dist"] = _libtraci.TraCILeaderDistance_dist_set
    __swig_getmethods__["dist"] = _libtraci.TraCILeaderDistance_dist_get
    if _newclass:
        dist = _swig_property(_libtraci.TraCILeaderDistance_dist_get, _libtraci.TraCILeaderDistance_dist_set)

    def __init__(self):
        this = _libtraci.new_TraCILeaderDistance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCILeaderDistance
    __del__ = lambda self: None
TraCILeaderDistance_swigregister = _libtraci.TraCILeaderDistance_swigregister
TraCILeaderDistance_swigregister(TraCILeaderDistance)

class TraCIInt(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIInt, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIInt_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIInt_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIInt_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIInt_value_get, _libtraci.TraCIInt_value_set)
    __swig_destroy__ = _libtraci.delete_TraCIInt
    __del__ = lambda self: None
TraCIInt_swigregister = _libtraci.TraCIInt_swigregister
TraCIInt_swigregister(TraCIInt)

class TraCIDouble(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIDouble_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIDouble_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIDouble_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIDouble_value_get, _libtraci.TraCIDouble_value_set)
    __swig_destroy__ = _libtraci.delete_TraCIDouble
    __del__ = lambda self: None
TraCIDouble_swigregister = _libtraci.TraCIDouble_swigregister
TraCIDouble_swigregister(TraCIDouble)

class TraCIString(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIString, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCIString_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIString_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIString_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIString_value_get, _libtraci.TraCIString_value_set)
    __swig_destroy__ = _libtraci.delete_TraCIString
    __del__ = lambda self: None
TraCIString_swigregister = _libtraci.TraCIString_swigregister
TraCIString_swigregister(TraCIString)

class TraCIStringList(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStringList, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStringList, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCIStringList_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCIStringList_value_set
    __swig_getmethods__["value"] = _libtraci.TraCIStringList_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCIStringList_value_get, _libtraci.TraCIStringList_value_set)

    def __init__(self):
        this = _libtraci.new_TraCIStringList()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIStringList
    __del__ = lambda self: None
TraCIStringList_swigregister = _libtraci.TraCIStringList_swigregister
TraCIStringList_swigregister(TraCIStringList)

class TraCIPhase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPhase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPhase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIPhase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIPhase
    __del__ = lambda self: None
    __swig_setmethods__["duration"] = _libtraci.TraCIPhase_duration_set
    __swig_getmethods__["duration"] = _libtraci.TraCIPhase_duration_get
    if _newclass:
        duration = _swig_property(_libtraci.TraCIPhase_duration_get, _libtraci.TraCIPhase_duration_set)
    __swig_setmethods__["state"] = _libtraci.TraCIPhase_state_set
    __swig_getmethods__["state"] = _libtraci.TraCIPhase_state_get
    if _newclass:
        state = _swig_property(_libtraci.TraCIPhase_state_get, _libtraci.TraCIPhase_state_set)
    __swig_setmethods__["minDur"] = _libtraci.TraCIPhase_minDur_set
    __swig_getmethods__["minDur"] = _libtraci.TraCIPhase_minDur_get
    if _newclass:
        minDur = _swig_property(_libtraci.TraCIPhase_minDur_get, _libtraci.TraCIPhase_minDur_set)
    __swig_setmethods__["maxDur"] = _libtraci.TraCIPhase_maxDur_set
    __swig_getmethods__["maxDur"] = _libtraci.TraCIPhase_maxDur_get
    if _newclass:
        maxDur = _swig_property(_libtraci.TraCIPhase_maxDur_get, _libtraci.TraCIPhase_maxDur_set)
    __swig_setmethods__["next"] = _libtraci.TraCIPhase_next_set
    __swig_getmethods__["next"] = _libtraci.TraCIPhase_next_get
    if _newclass:
        next = _swig_property(_libtraci.TraCIPhase_next_get, _libtraci.TraCIPhase_next_set)
    __swig_setmethods__["name"] = _libtraci.TraCIPhase_name_set
    __swig_getmethods__["name"] = _libtraci.TraCIPhase_name_get
    if _newclass:
        name = _swig_property(_libtraci.TraCIPhase_name_get, _libtraci.TraCIPhase_name_set)

    __repr__ = _trafficlight.Phase.__repr__

TraCIPhase_swigregister = _libtraci.TraCIPhase_swigregister
TraCIPhase_swigregister(TraCIPhase)

class TraCIPhaseVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIPhaseVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIPhaseVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCIPhaseVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCIPhaseVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCIPhaseVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCIPhaseVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCIPhaseVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCIPhaseVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCIPhaseVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCIPhaseVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCIPhaseVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCIPhaseVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCIPhaseVector_pop(self)

    def append(self, x):
        return _libtraci.TraCIPhaseVector_append(self, x)

    def empty(self):
        return _libtraci.TraCIPhaseVector_empty(self)

    def size(self):
        return _libtraci.TraCIPhaseVector_size(self)

    def swap(self, v):
        return _libtraci.TraCIPhaseVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCIPhaseVector_begin(self)

    def end(self):
        return _libtraci.TraCIPhaseVector_end(self)

    def rbegin(self):
        return _libtraci.TraCIPhaseVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCIPhaseVector_rend(self)

    def clear(self):
        return _libtraci.TraCIPhaseVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCIPhaseVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCIPhaseVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCIPhaseVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCIPhaseVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCIPhaseVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCIPhaseVector_front(self)

    def back(self):
        return _libtraci.TraCIPhaseVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCIPhaseVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCIPhaseVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCIPhaseVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCIPhaseVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCIPhaseVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCIPhaseVector
    __del__ = lambda self: None
TraCIPhaseVector_swigregister = _libtraci.TraCIPhaseVector_swigregister
TraCIPhaseVector_swigregister(TraCIPhaseVector)

class TraCILogic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILogic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILogic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCILogic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCILogic
    __del__ = lambda self: None
    __swig_setmethods__["programID"] = _libtraci.TraCILogic_programID_set
    __swig_getmethods__["programID"] = _libtraci.TraCILogic_programID_get
    if _newclass:
        programID = _swig_property(_libtraci.TraCILogic_programID_get, _libtraci.TraCILogic_programID_set)
    __swig_setmethods__["type"] = _libtraci.TraCILogic_type_set
    __swig_getmethods__["type"] = _libtraci.TraCILogic_type_get
    if _newclass:
        type = _swig_property(_libtraci.TraCILogic_type_get, _libtraci.TraCILogic_type_set)
    __swig_setmethods__["currentPhaseIndex"] = _libtraci.TraCILogic_currentPhaseIndex_set
    __swig_getmethods__["currentPhaseIndex"] = _libtraci.TraCILogic_currentPhaseIndex_get
    if _newclass:
        currentPhaseIndex = _swig_property(_libtraci.TraCILogic_currentPhaseIndex_get, _libtraci.TraCILogic_currentPhaseIndex_set)
    __swig_setmethods__["phases"] = _libtraci.TraCILogic_phases_set
    __swig_getmethods__["phases"] = _libtraci.TraCILogic_phases_get
    if _newclass:
        phases = _swig_property(_libtraci.TraCILogic_phases_get, _libtraci.TraCILogic_phases_set)
    __swig_setmethods__["subParameter"] = _libtraci.TraCILogic_subParameter_set
    __swig_getmethods__["subParameter"] = _libtraci.TraCILogic_subParameter_get
    if _newclass:
        subParameter = _swig_property(_libtraci.TraCILogic_subParameter_get, _libtraci.TraCILogic_subParameter_set)

    getPhases = _trafficlight.Logic.getPhases
    __repr__ = _trafficlight.Logic.__repr__

TraCILogic_swigregister = _libtraci.TraCILogic_swigregister
TraCILogic_swigregister(TraCILogic)

class TraCILink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILink, name)
    __repr__ = _swig_repr

    def __init__(self, _from, _via, _to):
        this = _libtraci.new_TraCILink(_from, _via, _to)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCILink
    __del__ = lambda self: None
    __swig_setmethods__["fromLane"] = _libtraci.TraCILink_fromLane_set
    __swig_getmethods__["fromLane"] = _libtraci.TraCILink_fromLane_get
    if _newclass:
        fromLane = _swig_property(_libtraci.TraCILink_fromLane_get, _libtraci.TraCILink_fromLane_set)
    __swig_setmethods__["viaLane"] = _libtraci.TraCILink_viaLane_set
    __swig_getmethods__["viaLane"] = _libtraci.TraCILink_viaLane_get
    if _newclass:
        viaLane = _swig_property(_libtraci.TraCILink_viaLane_get, _libtraci.TraCILink_viaLane_set)
    __swig_setmethods__["toLane"] = _libtraci.TraCILink_toLane_set
    __swig_getmethods__["toLane"] = _libtraci.TraCILink_toLane_get
    if _newclass:
        toLane = _swig_property(_libtraci.TraCILink_toLane_get, _libtraci.TraCILink_toLane_set)
TraCILink_swigregister = _libtraci.TraCILink_swigregister
TraCILink_swigregister(TraCILink)

class TraCIConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIConnection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIConnection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIConnection
    __del__ = lambda self: None
    __swig_setmethods__["approachedLane"] = _libtraci.TraCIConnection_approachedLane_set
    __swig_getmethods__["approachedLane"] = _libtraci.TraCIConnection_approachedLane_get
    if _newclass:
        approachedLane = _swig_property(_libtraci.TraCIConnection_approachedLane_get, _libtraci.TraCIConnection_approachedLane_set)
    __swig_setmethods__["hasPrio"] = _libtraci.TraCIConnection_hasPrio_set
    __swig_getmethods__["hasPrio"] = _libtraci.TraCIConnection_hasPrio_get
    if _newclass:
        hasPrio = _swig_property(_libtraci.TraCIConnection_hasPrio_get, _libtraci.TraCIConnection_hasPrio_set)
    __swig_setmethods__["isOpen"] = _libtraci.TraCIConnection_isOpen_set
    __swig_getmethods__["isOpen"] = _libtraci.TraCIConnection_isOpen_get
    if _newclass:
        isOpen = _swig_property(_libtraci.TraCIConnection_isOpen_get, _libtraci.TraCIConnection_isOpen_set)
    __swig_setmethods__["hasFoe"] = _libtraci.TraCIConnection_hasFoe_set
    __swig_getmethods__["hasFoe"] = _libtraci.TraCIConnection_hasFoe_get
    if _newclass:
        hasFoe = _swig_property(_libtraci.TraCIConnection_hasFoe_get, _libtraci.TraCIConnection_hasFoe_set)
    __swig_setmethods__["approachedInternal"] = _libtraci.TraCIConnection_approachedInternal_set
    __swig_getmethods__["approachedInternal"] = _libtraci.TraCIConnection_approachedInternal_get
    if _newclass:
        approachedInternal = _swig_property(_libtraci.TraCIConnection_approachedInternal_get, _libtraci.TraCIConnection_approachedInternal_set)
    __swig_setmethods__["state"] = _libtraci.TraCIConnection_state_set
    __swig_getmethods__["state"] = _libtraci.TraCIConnection_state_get
    if _newclass:
        state = _swig_property(_libtraci.TraCIConnection_state_get, _libtraci.TraCIConnection_state_set)
    __swig_setmethods__["direction"] = _libtraci.TraCIConnection_direction_set
    __swig_getmethods__["direction"] = _libtraci.TraCIConnection_direction_get
    if _newclass:
        direction = _swig_property(_libtraci.TraCIConnection_direction_get, _libtraci.TraCIConnection_direction_set)
    __swig_setmethods__["length"] = _libtraci.TraCIConnection_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIConnection_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIConnection_length_get, _libtraci.TraCIConnection_length_set)
TraCIConnection_swigregister = _libtraci.TraCIConnection_swigregister
TraCIConnection_swigregister(TraCIConnection)

class TraCIVehicleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIVehicleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIVehicleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libtraci.TraCIVehicleData_id_set
    __swig_getmethods__["id"] = _libtraci.TraCIVehicleData_id_get
    if _newclass:
        id = _swig_property(_libtraci.TraCIVehicleData_id_get, _libtraci.TraCIVehicleData_id_set)
    __swig_setmethods__["length"] = _libtraci.TraCIVehicleData_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIVehicleData_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIVehicleData_length_get, _libtraci.TraCIVehicleData_length_set)
    __swig_setmethods__["entryTime"] = _libtraci.TraCIVehicleData_entryTime_set
    __swig_getmethods__["entryTime"] = _libtraci.TraCIVehicleData_entryTime_get
    if _newclass:
        entryTime = _swig_property(_libtraci.TraCIVehicleData_entryTime_get, _libtraci.TraCIVehicleData_entryTime_set)
    __swig_setmethods__["leaveTime"] = _libtraci.TraCIVehicleData_leaveTime_set
    __swig_getmethods__["leaveTime"] = _libtraci.TraCIVehicleData_leaveTime_get
    if _newclass:
        leaveTime = _swig_property(_libtraci.TraCIVehicleData_leaveTime_get, _libtraci.TraCIVehicleData_leaveTime_set)
    __swig_setmethods__["typeID"] = _libtraci.TraCIVehicleData_typeID_set
    __swig_getmethods__["typeID"] = _libtraci.TraCIVehicleData_typeID_get
    if _newclass:
        typeID = _swig_property(_libtraci.TraCIVehicleData_typeID_get, _libtraci.TraCIVehicleData_typeID_set)

    def __init__(self):
        this = _libtraci.new_TraCIVehicleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIVehicleData
    __del__ = lambda self: None
TraCIVehicleData_swigregister = _libtraci.TraCIVehicleData_swigregister
TraCIVehicleData_swigregister(TraCIVehicleData)

class TraCINextTLSData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextTLSData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextTLSData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libtraci.TraCINextTLSData_id_set
    __swig_getmethods__["id"] = _libtraci.TraCINextTLSData_id_get
    if _newclass:
        id = _swig_property(_libtraci.TraCINextTLSData_id_get, _libtraci.TraCINextTLSData_id_set)
    __swig_setmethods__["tlIndex"] = _libtraci.TraCINextTLSData_tlIndex_set
    __swig_getmethods__["tlIndex"] = _libtraci.TraCINextTLSData_tlIndex_get
    if _newclass:
        tlIndex = _swig_property(_libtraci.TraCINextTLSData_tlIndex_get, _libtraci.TraCINextTLSData_tlIndex_set)
    __swig_setmethods__["dist"] = _libtraci.TraCINextTLSData_dist_set
    __swig_getmethods__["dist"] = _libtraci.TraCINextTLSData_dist_get
    if _newclass:
        dist = _swig_property(_libtraci.TraCINextTLSData_dist_get, _libtraci.TraCINextTLSData_dist_set)
    __swig_setmethods__["state"] = _libtraci.TraCINextTLSData_state_set
    __swig_getmethods__["state"] = _libtraci.TraCINextTLSData_state_get
    if _newclass:
        state = _swig_property(_libtraci.TraCINextTLSData_state_get, _libtraci.TraCINextTLSData_state_set)

    def __init__(self):
        this = _libtraci.new_TraCINextTLSData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCINextTLSData
    __del__ = lambda self: None
TraCINextTLSData_swigregister = _libtraci.TraCINextTLSData_swigregister
TraCINextTLSData_swigregister(TraCINextTLSData)

class TraCINextStopData(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextStopData, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextStopData, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _libtraci.new_TraCINextStopData(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getString(self):
        return _libtraci.TraCINextStopData_getString(self)
    __swig_setmethods__["lane"] = _libtraci.TraCINextStopData_lane_set
    __swig_getmethods__["lane"] = _libtraci.TraCINextStopData_lane_get
    if _newclass:
        lane = _swig_property(_libtraci.TraCINextStopData_lane_get, _libtraci.TraCINextStopData_lane_set)
    __swig_setmethods__["startPos"] = _libtraci.TraCINextStopData_startPos_set
    __swig_getmethods__["startPos"] = _libtraci.TraCINextStopData_startPos_get
    if _newclass:
        startPos = _swig_property(_libtraci.TraCINextStopData_startPos_get, _libtraci.TraCINextStopData_startPos_set)
    __swig_setmethods__["endPos"] = _libtraci.TraCINextStopData_endPos_set
    __swig_getmethods__["endPos"] = _libtraci.TraCINextStopData_endPos_get
    if _newclass:
        endPos = _swig_property(_libtraci.TraCINextStopData_endPos_get, _libtraci.TraCINextStopData_endPos_set)
    __swig_setmethods__["stoppingPlaceID"] = _libtraci.TraCINextStopData_stoppingPlaceID_set
    __swig_getmethods__["stoppingPlaceID"] = _libtraci.TraCINextStopData_stoppingPlaceID_get
    if _newclass:
        stoppingPlaceID = _swig_property(_libtraci.TraCINextStopData_stoppingPlaceID_get, _libtraci.TraCINextStopData_stoppingPlaceID_set)
    __swig_setmethods__["stopFlags"] = _libtraci.TraCINextStopData_stopFlags_set
    __swig_getmethods__["stopFlags"] = _libtraci.TraCINextStopData_stopFlags_get
    if _newclass:
        stopFlags = _swig_property(_libtraci.TraCINextStopData_stopFlags_get, _libtraci.TraCINextStopData_stopFlags_set)
    __swig_setmethods__["duration"] = _libtraci.TraCINextStopData_duration_set
    __swig_getmethods__["duration"] = _libtraci.TraCINextStopData_duration_get
    if _newclass:
        duration = _swig_property(_libtraci.TraCINextStopData_duration_get, _libtraci.TraCINextStopData_duration_set)
    __swig_setmethods__["until"] = _libtraci.TraCINextStopData_until_set
    __swig_getmethods__["until"] = _libtraci.TraCINextStopData_until_get
    if _newclass:
        until = _swig_property(_libtraci.TraCINextStopData_until_get, _libtraci.TraCINextStopData_until_set)
    __swig_setmethods__["intendedArrival"] = _libtraci.TraCINextStopData_intendedArrival_set
    __swig_getmethods__["intendedArrival"] = _libtraci.TraCINextStopData_intendedArrival_get
    if _newclass:
        intendedArrival = _swig_property(_libtraci.TraCINextStopData_intendedArrival_get, _libtraci.TraCINextStopData_intendedArrival_set)
    __swig_setmethods__["arrival"] = _libtraci.TraCINextStopData_arrival_set
    __swig_getmethods__["arrival"] = _libtraci.TraCINextStopData_arrival_get
    if _newclass:
        arrival = _swig_property(_libtraci.TraCINextStopData_arrival_get, _libtraci.TraCINextStopData_arrival_set)
    __swig_setmethods__["depart"] = _libtraci.TraCINextStopData_depart_set
    __swig_getmethods__["depart"] = _libtraci.TraCINextStopData_depart_get
    if _newclass:
        depart = _swig_property(_libtraci.TraCINextStopData_depart_get, _libtraci.TraCINextStopData_depart_set)
    __swig_setmethods__["split"] = _libtraci.TraCINextStopData_split_set
    __swig_getmethods__["split"] = _libtraci.TraCINextStopData_split_get
    if _newclass:
        split = _swig_property(_libtraci.TraCINextStopData_split_get, _libtraci.TraCINextStopData_split_set)
    __swig_setmethods__["join"] = _libtraci.TraCINextStopData_join_set
    __swig_getmethods__["join"] = _libtraci.TraCINextStopData_join_get
    if _newclass:
        join = _swig_property(_libtraci.TraCINextStopData_join_get, _libtraci.TraCINextStopData_join_set)
    __swig_setmethods__["actType"] = _libtraci.TraCINextStopData_actType_set
    __swig_getmethods__["actType"] = _libtraci.TraCINextStopData_actType_get
    if _newclass:
        actType = _swig_property(_libtraci.TraCINextStopData_actType_get, _libtraci.TraCINextStopData_actType_set)
    __swig_setmethods__["tripId"] = _libtraci.TraCINextStopData_tripId_set
    __swig_getmethods__["tripId"] = _libtraci.TraCINextStopData_tripId_get
    if _newclass:
        tripId = _swig_property(_libtraci.TraCINextStopData_tripId_get, _libtraci.TraCINextStopData_tripId_set)
    __swig_setmethods__["line"] = _libtraci.TraCINextStopData_line_set
    __swig_getmethods__["line"] = _libtraci.TraCINextStopData_line_get
    if _newclass:
        line = _swig_property(_libtraci.TraCINextStopData_line_get, _libtraci.TraCINextStopData_line_set)
    __swig_setmethods__["speed"] = _libtraci.TraCINextStopData_speed_set
    __swig_getmethods__["speed"] = _libtraci.TraCINextStopData_speed_get
    if _newclass:
        speed = _swig_property(_libtraci.TraCINextStopData_speed_get, _libtraci.TraCINextStopData_speed_set)

    __attr_repr__ = _vehicle.StopData.__attr_repr__
    __repr__ = _vehicle.StopData.__repr__

    __swig_destroy__ = _libtraci.delete_TraCINextStopData
    __del__ = lambda self: None
TraCINextStopData_swigregister = _libtraci.TraCINextStopData_swigregister
TraCINextStopData_swigregister(TraCINextStopData)

class TraCINextStopDataVector(TraCIResult):
    __swig_setmethods__ = {}
    for _s in [TraCIResult]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextStopDataVector, name, value)
    __swig_getmethods__ = {}
    for _s in [TraCIResult]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextStopDataVector, name)
    __repr__ = _swig_repr

    def getString(self):
        return _libtraci.TraCINextStopDataVector_getString(self)
    __swig_setmethods__["value"] = _libtraci.TraCINextStopDataVector_value_set
    __swig_getmethods__["value"] = _libtraci.TraCINextStopDataVector_value_get
    if _newclass:
        value = _swig_property(_libtraci.TraCINextStopDataVector_value_get, _libtraci.TraCINextStopDataVector_value_set)

    def __init__(self):
        this = _libtraci.new_TraCINextStopDataVector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCINextStopDataVector
    __del__ = lambda self: None
TraCINextStopDataVector_swigregister = _libtraci.TraCINextStopDataVector_swigregister
TraCINextStopDataVector_swigregister(TraCINextStopDataVector)

class TraCIBestLanesData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIBestLanesData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIBestLanesData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["laneID"] = _libtraci.TraCIBestLanesData_laneID_set
    __swig_getmethods__["laneID"] = _libtraci.TraCIBestLanesData_laneID_get
    if _newclass:
        laneID = _swig_property(_libtraci.TraCIBestLanesData_laneID_get, _libtraci.TraCIBestLanesData_laneID_set)
    __swig_setmethods__["length"] = _libtraci.TraCIBestLanesData_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIBestLanesData_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIBestLanesData_length_get, _libtraci.TraCIBestLanesData_length_set)
    __swig_setmethods__["occupation"] = _libtraci.TraCIBestLanesData_occupation_set
    __swig_getmethods__["occupation"] = _libtraci.TraCIBestLanesData_occupation_get
    if _newclass:
        occupation = _swig_property(_libtraci.TraCIBestLanesData_occupation_get, _libtraci.TraCIBestLanesData_occupation_set)
    __swig_setmethods__["bestLaneOffset"] = _libtraci.TraCIBestLanesData_bestLaneOffset_set
    __swig_getmethods__["bestLaneOffset"] = _libtraci.TraCIBestLanesData_bestLaneOffset_get
    if _newclass:
        bestLaneOffset = _swig_property(_libtraci.TraCIBestLanesData_bestLaneOffset_get, _libtraci.TraCIBestLanesData_bestLaneOffset_set)
    __swig_setmethods__["allowsContinuation"] = _libtraci.TraCIBestLanesData_allowsContinuation_set
    __swig_getmethods__["allowsContinuation"] = _libtraci.TraCIBestLanesData_allowsContinuation_get
    if _newclass:
        allowsContinuation = _swig_property(_libtraci.TraCIBestLanesData_allowsContinuation_get, _libtraci.TraCIBestLanesData_allowsContinuation_set)
    __swig_setmethods__["continuationLanes"] = _libtraci.TraCIBestLanesData_continuationLanes_set
    __swig_getmethods__["continuationLanes"] = _libtraci.TraCIBestLanesData_continuationLanes_get
    if _newclass:
        continuationLanes = _swig_property(_libtraci.TraCIBestLanesData_continuationLanes_get, _libtraci.TraCIBestLanesData_continuationLanes_set)

    def __init__(self):
        this = _libtraci.new_TraCIBestLanesData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libtraci.delete_TraCIBestLanesData
    __del__ = lambda self: None
TraCIBestLanesData_swigregister = _libtraci.TraCIBestLanesData_swigregister
TraCIBestLanesData_swigregister(TraCIBestLanesData)

class TraCIStage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStage, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _libtraci.new_TraCIStage(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["type"] = _libtraci.TraCIStage_type_set
    __swig_getmethods__["type"] = _libtraci.TraCIStage_type_get
    if _newclass:
        type = _swig_property(_libtraci.TraCIStage_type_get, _libtraci.TraCIStage_type_set)
    __swig_setmethods__["vType"] = _libtraci.TraCIStage_vType_set
    __swig_getmethods__["vType"] = _libtraci.TraCIStage_vType_get
    if _newclass:
        vType = _swig_property(_libtraci.TraCIStage_vType_get, _libtraci.TraCIStage_vType_set)
    __swig_setmethods__["line"] = _libtraci.TraCIStage_line_set
    __swig_getmethods__["line"] = _libtraci.TraCIStage_line_get
    if _newclass:
        line = _swig_property(_libtraci.TraCIStage_line_get, _libtraci.TraCIStage_line_set)
    __swig_setmethods__["destStop"] = _libtraci.TraCIStage_destStop_set
    __swig_getmethods__["destStop"] = _libtraci.TraCIStage_destStop_get
    if _newclass:
        destStop = _swig_property(_libtraci.TraCIStage_destStop_get, _libtraci.TraCIStage_destStop_set)
    __swig_setmethods__["edges"] = _libtraci.TraCIStage_edges_set
    __swig_getmethods__["edges"] = _libtraci.TraCIStage_edges_get
    if _newclass:
        edges = _swig_property(_libtraci.TraCIStage_edges_get, _libtraci.TraCIStage_edges_set)
    __swig_setmethods__["travelTime"] = _libtraci.TraCIStage_travelTime_set
    __swig_getmethods__["travelTime"] = _libtraci.TraCIStage_travelTime_get
    if _newclass:
        travelTime = _swig_property(_libtraci.TraCIStage_travelTime_get, _libtraci.TraCIStage_travelTime_set)
    __swig_setmethods__["cost"] = _libtraci.TraCIStage_cost_set
    __swig_getmethods__["cost"] = _libtraci.TraCIStage_cost_get
    if _newclass:
        cost = _swig_property(_libtraci.TraCIStage_cost_get, _libtraci.TraCIStage_cost_set)
    __swig_setmethods__["length"] = _libtraci.TraCIStage_length_set
    __swig_getmethods__["length"] = _libtraci.TraCIStage_length_get
    if _newclass:
        length = _swig_property(_libtraci.TraCIStage_length_get, _libtraci.TraCIStage_length_set)
    __swig_setmethods__["intended"] = _libtraci.TraCIStage_intended_set
    __swig_getmethods__["intended"] = _libtraci.TraCIStage_intended_get
    if _newclass:
        intended = _swig_property(_libtraci.TraCIStage_intended_get, _libtraci.TraCIStage_intended_set)
    __swig_setmethods__["depart"] = _libtraci.TraCIStage_depart_set
    __swig_getmethods__["depart"] = _libtraci.TraCIStage_depart_get
    if _newclass:
        depart = _swig_property(_libtraci.TraCIStage_depart_get, _libtraci.TraCIStage_depart_set)
    __swig_setmethods__["departPos"] = _libtraci.TraCIStage_departPos_set
    __swig_getmethods__["departPos"] = _libtraci.TraCIStage_departPos_get
    if _newclass:
        departPos = _swig_property(_libtraci.TraCIStage_departPos_get, _libtraci.TraCIStage_departPos_set)
    __swig_setmethods__["arrivalPos"] = _libtraci.TraCIStage_arrivalPos_set
    __swig_getmethods__["arrivalPos"] = _libtraci.TraCIStage_arrivalPos_get
    if _newclass:
        arrivalPos = _swig_property(_libtraci.TraCIStage_arrivalPos_get, _libtraci.TraCIStage_arrivalPos_set)
    __swig_setmethods__["description"] = _libtraci.TraCIStage_description_set
    __swig_getmethods__["description"] = _libtraci.TraCIStage_description_get
    if _newclass:
        description = _swig_property(_libtraci.TraCIStage_description_get, _libtraci.TraCIStage_description_set)

    __attr_repr__ = _simulation.Stage.__attr_repr__
    __repr__ = _simulation.Stage.__repr__

    __swig_destroy__ = _libtraci.delete_TraCIStage
    __del__ = lambda self: None
TraCIStage_swigregister = _libtraci.TraCIStage_swigregister
TraCIStage_swigregister(TraCIStage)

class TraCIReservation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIReservation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIReservation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libtraci.new_TraCIReservation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["id"] = _libtraci.TraCIReservation_id_set
    __swig_getmethods__["id"] = _libtraci.TraCIReservation_id_get
    if _newclass:
        id = _swig_property(_libtraci.TraCIReservation_id_get, _libtraci.TraCIReservation_id_set)
    __swig_setmethods__["persons"] = _libtraci.TraCIReservation_persons_set
    __swig_getmethods__["persons"] = _libtraci.TraCIReservation_persons_get
    if _newclass:
        persons = _swig_property(_libtraci.TraCIReservation_persons_get, _libtraci.TraCIReservation_persons_set)
    __swig_setmethods__["group"] = _libtraci.TraCIReservation_group_set
    __swig_getmethods__["group"] = _libtraci.TraCIReservation_group_get
    if _newclass:
        group = _swig_property(_libtraci.TraCIReservation_group_get, _libtraci.TraCIReservation_group_set)
    __swig_setmethods__["fromEdge"] = _libtraci.TraCIReservation_fromEdge_set
    __swig_getmethods__["fromEdge"] = _libtraci.TraCIReservation_fromEdge_get
    if _newclass:
        fromEdge = _swig_property(_libtraci.TraCIReservation_fromEdge_get, _libtraci.TraCIReservation_fromEdge_set)
    __swig_setmethods__["toEdge"] = _libtraci.TraCIReservation_toEdge_set
    __swig_getmethods__["toEdge"] = _libtraci.TraCIReservation_toEdge_get
    if _newclass:
        toEdge = _swig_property(_libtraci.TraCIReservation_toEdge_get, _libtraci.TraCIReservation_toEdge_set)
    __swig_setmethods__["departPos"] = _libtraci.TraCIReservation_departPos_set
    __swig_getmethods__["departPos"] = _libtraci.TraCIReservation_departPos_get
    if _newclass:
        departPos = _swig_property(_libtraci.TraCIReservation_departPos_get, _libtraci.TraCIReservation_departPos_set)
    __swig_setmethods__["arrivalPos"] = _libtraci.TraCIReservation_arrivalPos_set
    __swig_getmethods__["arrivalPos"] = _libtraci.TraCIReservation_arrivalPos_get
    if _newclass:
        arrivalPos = _swig_property(_libtraci.TraCIReservation_arrivalPos_get, _libtraci.TraCIReservation_arrivalPos_set)
    __swig_setmethods__["depart"] = _libtraci.TraCIReservation_depart_set
    __swig_getmethods__["depart"] = _libtraci.TraCIReservation_depart_get
    if _newclass:
        depart = _swig_property(_libtraci.TraCIReservation_depart_get, _libtraci.TraCIReservation_depart_set)
    __swig_setmethods__["reservationTime"] = _libtraci.TraCIReservation_reservationTime_set
    __swig_getmethods__["reservationTime"] = _libtraci.TraCIReservation_reservationTime_get
    if _newclass:
        reservationTime = _swig_property(_libtraci.TraCIReservation_reservationTime_get, _libtraci.TraCIReservation_reservationTime_set)

    __attr_repr__ = _person.Reservation.__attr_repr__
    __repr__ = _person.Reservation.__repr__

    __swig_destroy__ = _libtraci.delete_TraCIReservation
    __del__ = lambda self: None
TraCIReservation_swigregister = _libtraci.TraCIReservation_swigregister
TraCIReservation_swigregister(TraCIReservation)

class TraCILogicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCILogicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCILogicVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCILogicVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCILogicVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCILogicVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCILogicVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCILogicVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCILogicVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCILogicVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCILogicVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCILogicVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCILogicVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCILogicVector_pop(self)

    def append(self, x):
        return _libtraci.TraCILogicVector_append(self, x)

    def empty(self):
        return _libtraci.TraCILogicVector_empty(self)

    def size(self):
        return _libtraci.TraCILogicVector_size(self)

    def swap(self, v):
        return _libtraci.TraCILogicVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCILogicVector_begin(self)

    def end(self):
        return _libtraci.TraCILogicVector_end(self)

    def rbegin(self):
        return _libtraci.TraCILogicVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCILogicVector_rend(self)

    def clear(self):
        return _libtraci.TraCILogicVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCILogicVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCILogicVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCILogicVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCILogicVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCILogicVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCILogicVector_front(self)

    def back(self):
        return _libtraci.TraCILogicVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCILogicVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCILogicVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCILogicVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCILogicVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCILogicVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCILogicVector
    __del__ = lambda self: None
TraCILogicVector_swigregister = _libtraci.TraCILogicVector_swigregister
TraCILogicVector_swigregister(TraCILogicVector)

class TraCIStageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIStageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIStageVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCIStageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCIStageVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCIStageVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCIStageVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCIStageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCIStageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCIStageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCIStageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCIStageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCIStageVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCIStageVector_pop(self)

    def append(self, x):
        return _libtraci.TraCIStageVector_append(self, x)

    def empty(self):
        return _libtraci.TraCIStageVector_empty(self)

    def size(self):
        return _libtraci.TraCIStageVector_size(self)

    def swap(self, v):
        return _libtraci.TraCIStageVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCIStageVector_begin(self)

    def end(self):
        return _libtraci.TraCIStageVector_end(self)

    def rbegin(self):
        return _libtraci.TraCIStageVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCIStageVector_rend(self)

    def clear(self):
        return _libtraci.TraCIStageVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCIStageVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCIStageVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCIStageVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCIStageVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCIStageVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCIStageVector_front(self)

    def back(self):
        return _libtraci.TraCIStageVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCIStageVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCIStageVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCIStageVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCIStageVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCIStageVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCIStageVector
    __del__ = lambda self: None
TraCIStageVector_swigregister = _libtraci.TraCIStageVector_swigregister
TraCIStageVector_swigregister(TraCIStageVector)

class TraCINextStopDataVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCINextStopDataVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCINextStopDataVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCINextStopDataVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCINextStopDataVector2___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCINextStopDataVector2___bool__(self)

    def __len__(self):
        return _libtraci.TraCINextStopDataVector2___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCINextStopDataVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCINextStopDataVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCINextStopDataVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCINextStopDataVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCINextStopDataVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCINextStopDataVector2___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCINextStopDataVector2_pop(self)

    def append(self, x):
        return _libtraci.TraCINextStopDataVector2_append(self, x)

    def empty(self):
        return _libtraci.TraCINextStopDataVector2_empty(self)

    def size(self):
        return _libtraci.TraCINextStopDataVector2_size(self)

    def swap(self, v):
        return _libtraci.TraCINextStopDataVector2_swap(self, v)

    def begin(self):
        return _libtraci.TraCINextStopDataVector2_begin(self)

    def end(self):
        return _libtraci.TraCINextStopDataVector2_end(self)

    def rbegin(self):
        return _libtraci.TraCINextStopDataVector2_rbegin(self)

    def rend(self):
        return _libtraci.TraCINextStopDataVector2_rend(self)

    def clear(self):
        return _libtraci.TraCINextStopDataVector2_clear(self)

    def get_allocator(self):
        return _libtraci.TraCINextStopDataVector2_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCINextStopDataVector2_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCINextStopDataVector2_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCINextStopDataVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCINextStopDataVector2_push_back(self, x)

    def front(self):
        return _libtraci.TraCINextStopDataVector2_front(self)

    def back(self):
        return _libtraci.TraCINextStopDataVector2_back(self)

    def assign(self, n, x):
        return _libtraci.TraCINextStopDataVector2_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCINextStopDataVector2_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCINextStopDataVector2_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCINextStopDataVector2_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCINextStopDataVector2_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCINextStopDataVector2
    __del__ = lambda self: None
TraCINextStopDataVector2_swigregister = _libtraci.TraCINextStopDataVector2_swigregister
TraCINextStopDataVector2_swigregister(TraCINextStopDataVector2)

class TraCIReservationVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraCIReservationVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraCIReservationVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libtraci.TraCIReservationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libtraci.TraCIReservationVector___nonzero__(self)

    def __bool__(self):
        return _libtraci.TraCIReservationVector___bool__(self)

    def __len__(self):
        return _libtraci.TraCIReservationVector___len__(self)

    def __getslice__(self, i, j):
        return _libtraci.TraCIReservationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libtraci.TraCIReservationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libtraci.TraCIReservationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libtraci.TraCIReservationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libtraci.TraCIReservationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libtraci.TraCIReservationVector___setitem__(self, *args)

    def pop(self):
        return _libtraci.TraCIReservationVector_pop(self)

    def append(self, x):
        return _libtraci.TraCIReservationVector_append(self, x)

    def empty(self):
        return _libtraci.TraCIReservationVector_empty(self)

    def size(self):
        return _libtraci.TraCIReservationVector_size(self)

    def swap(self, v):
        return _libtraci.TraCIReservationVector_swap(self, v)

    def begin(self):
        return _libtraci.TraCIReservationVector_begin(self)

    def end(self):
        return _libtraci.TraCIReservationVector_end(self)

    def rbegin(self):
        return _libtraci.TraCIReservationVector_rbegin(self)

    def rend(self):
        return _libtraci.TraCIReservationVector_rend(self)

    def clear(self):
        return _libtraci.TraCIReservationVector_clear(self)

    def get_allocator(self):
        return _libtraci.TraCIReservationVector_get_allocator(self)

    def pop_back(self):
        return _libtraci.TraCIReservationVector_pop_back(self)

    def erase(self, *args):
        return _libtraci.TraCIReservationVector_erase(self, *args)

    def __init__(self, *args):
        this = _libtraci.new_TraCIReservationVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libtraci.TraCIReservationVector_push_back(self, x)

    def front(self):
        return _libtraci.TraCIReservationVector_front(self)

    def back(self):
        return _libtraci.TraCIReservationVector_back(self)

    def assign(self, n, x):
        return _libtraci.TraCIReservationVector_assign(self, n, x)

    def resize(self, *args):
        return _libtraci.TraCIReservationVector_resize(self, *args)

    def insert(self, *args):
        return _libtraci.TraCIReservationVector_insert(self, *args)

    def reserve(self, n):
        return _libtraci.TraCIReservationVector_reserve(self, n)

    def capacity(self):
        return _libtraci.TraCIReservationVector_capacity(self)
    __swig_destroy__ = _libtraci.delete_TraCIReservationVector
    __del__ = lambda self: None
TraCIReservationVector_swigregister = _libtraci.TraCIReservationVector_swigregister
TraCIReservationVector_swigregister(TraCIReservationVector)

class route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, route, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getIDList = staticmethod(_libtraci.route_getIDList)
    else:
        getIDList = _libtraci.route_getIDList
    if _newclass:
        getIDCount = staticmethod(_libtraci.route_getIDCount)
    else:
        getIDCount = _libtraci.route_getIDCount
    if _newclass:
        getEdges = staticmethod(_libtraci.route_getEdges)
    else:
        getEdges = _libtraci.route_getEdges
    if _newclass:
        getParameter = staticmethod(_libtraci.route_getParameter)
    else:
        getParameter = _libtraci.route_getParameter
    if _newclass:
        getParameterWithKey = staticmethod(_libtraci.route_getParameterWithKey)
    else:
        getParameterWithKey = _libtraci.route_getParameterWithKey
    if _newclass:
        add = staticmethod(_libtraci.route_add)
    else:
        add = _libtraci.route_add
    if _newclass:
        setParameter = staticmethod(_libtraci.route_setParameter)
    else:
        setParameter = _libtraci.route_setParameter
    __swig_destroy__ = _libtraci.delete_route
    __del__ = lambda self: None
route_swigregister = _libtraci.route_swigregister
route_swigregister(route)

def route_getIDList():
    return _libtraci.route_getIDList()
route_getIDList = _libtraci.route_getIDList

def route_getIDCount():
    return _libtraci.route_getIDCount()
route_getIDCount = _libtraci.route_getIDCount

def route_getEdges(routeID):
    return _libtraci.route_getEdges(routeID)
route_getEdges = _libtraci.route_getEdges

def route_getParameter(routeID, param):
    return _libtraci.route_getParameter(routeID, param)
route_getParameter = _libtraci.route_getParameter

def route_getParameterWithKey(objectID, key):
    return _libtraci.route_getParameterWithKey(objectID, key)
route_getParameterWithKey = _libtraci.route_getParameterWithKey

def route_add(routeID, edges):
    return _libtraci.route_add(routeID, edges)
route_add = _libtraci.route_add

def route_setParameter(routeID, param, value):
    return _libtraci.route_setParameter(routeID, param, value)
route_setParameter = _libtraci.route_setParameter

class simulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simulation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        init = staticmethod(_libtraci.simulation_init)
    else:
        init = _libtraci.simulation_init
    if _newclass:
        start = staticmethod(_libtraci.simulation_start)
    else:
        start = _libtraci.simulation_start
    if _newclass:
        isLibsumo = staticmethod(_libtraci.simulation_isLibsumo)
    else:
        isLibsumo = _libtraci.simulation_isLibsumo
    if _newclass:
        hasGUI = staticmethod(_libtraci.simulation_hasGUI)
    else:
        hasGUI = _libtraci.simulation_hasGUI
    if _newclass:
        switchConnection = staticmethod(_libtraci.simulation_switchConnection)
    else:
        switchConnection = _libtraci.simulation_switchConnection
    if _newclass:
        getLabel = staticmethod(_libtraci.simulation_getLabel)
    else:
        getLabel = _libtraci.simulation_getLabel
    if _newclass:
        setOrder = staticmethod(_libtraci.simulation_setOrder)
    else:
        setOrder = _libtraci.simulation_setOrder
    if _newclass:
        load = staticmethod(_libtraci.simulation_load)
    else:
        load = _libtraci.simulation_load
    if _newclass:
        isLoaded = staticmethod(_libtraci.simulation_isLoaded)
    else:
        isLoaded = _libtraci.simulation_isLoaded
    if _newclass:
        step = staticmethod(_libtraci.simulation_step)
    else:
        step = _libtraci.simulation_step
    if _newclass:
        close = staticmethod(_libtraci.simulation_close)
    else:
        close = _libtraci.simulation_close
    if _newclass:
        getVersion = staticmethod(_libtraci.simulation_getVersion)
    else:
        getVersion = _libtraci.simulation_getVersion
    if _newclass:
        getCurrentTime = staticmethod(_libtraci.simulation_getCurrentTime)
    else:
        getCurrentTime = _libtraci.simulation_getCurrentTime
    if _newclass:
        getTime = staticmethod(_libtraci.simulation_getTime)
    else:
        getTime = _libtraci.simulation_getTime
    if _newclass:
        getLoadedNumber = staticmethod(_libtraci.simulation_getLoadedNumber)
    else:
        getLoadedNumber = _libtraci.simulation_getLoadedNumber
    if _newclass:
        getLoadedIDList = staticmethod(_libtraci.simulation_getLoadedIDList)
    else:
        getLoadedIDList = _libtraci.simulation_getLoadedIDList
    if _newclass:
        getDepartedNumber = staticmethod(_libtraci.simulation_getDepartedNumber)
    else:
        getDepartedNumber = _libtraci.simulation_getDepartedNumber
    if _newclass:
        getDepartedIDList = staticmethod(_libtraci.simulation_getDepartedIDList)
    else:
        getDepartedIDList = _libtraci.simulation_getDepartedIDList
    if _newclass:
        getArrivedNumber = staticmethod(_libtraci.simulation_getArrivedNumber)
    else:
        getArrivedNumber = _libtraci.simulation_getArrivedNumber
    if _newclass:
        getArrivedIDList = staticmethod(_libtraci.simulation_getArrivedIDList)
    else:
        getArrivedIDList = _libtraci.simulation_getArrivedIDList
    if _newclass:
        getParkingStartingVehiclesNumber = staticmethod(_libtraci.simulation_getParkingStartingVehiclesNumber)
    else:
        getParkingStartingVehiclesNumber = _libtraci.simulation_getParkingStartingVehiclesNumber
    if _newclass:
        getParkingStartingVehiclesIDList = staticmethod(_libtraci.simulation_getParkingStartingVehiclesIDList)
    else:
        getParkingStartingVehiclesIDList = _libtraci.simulation_getParkingStartingVehiclesIDList
    if _newclass:
        getParkingEndingVehiclesNumber = staticmethod(_libtraci.simulation_getParkingEndingVehiclesNumber)
    else:
        getParkingEndingVehiclesNumber = _libtraci.simulation_getParkingEndingVehiclesNumber
    if _newclass:
        getParkingEndingVehiclesIDList = staticmethod(_libtraci.simulation_getParkingEndingVehiclesIDList)
    else:
        getParkingEndingVehiclesIDList = _libtraci.simulation_getParkingEndingVehiclesIDList
    if _newclass:
        getStopStartingVehiclesNumber = staticmethod(_libtraci.simulation_getStopStartingVehiclesNumber)
    else:
        getStopStartingVehiclesNumber = _libtraci.simulation_getStopStartingVehiclesNumber
    if _newclass:
        getStopStartingVehiclesIDList = staticmethod(_libtraci.simulation_getStopStartingVehiclesIDList)
    else:
        getStopStartingVehiclesIDList = _libtraci.simulation_getStopStartingVehiclesIDList
    if _newclass:
        getStopEndingVehiclesNumber = staticmethod(_libtraci.simulation_getStopEndingVehiclesNumber)
    else:
        getStopEndingVehiclesNumber = _libtraci.simulation_getStopEndingVehiclesNumber
    if _newclass:
        getStopEndingVehiclesIDList = staticmethod(_libtraci.simulation_getStopEndingVehiclesIDList)
    else:
        getStopEndingVehiclesIDList = _libtraci.simulation_getStopEndingVehiclesIDList
    if _newclass:
        getCollidingVehiclesNumber = staticmethod(_libtraci.simulation_getCollidingVehiclesNumber)
    else:
        getCollidingVehiclesNumber = _libtraci.simulation_getCollidingVehiclesNumber
    if _newclass:
        getCollidingVehiclesIDList = staticmethod(_libtraci.simulation_getCollidingVehiclesIDList)
    else:
        getCollidingVehiclesIDList = _libtraci.simulation_getCollidingVehiclesIDList
    if _newclass:
        getEmergencyStoppingVehiclesNumber = staticmethod(_libtraci.simulation_getEmergencyStoppingVehiclesNumber)
    else:
        getEmergencyStoppingVehiclesNumber = _libtraci.simulation_getEmergencyStoppingVehiclesNumber
    if _newclass:
        getEmergencyStoppingVehiclesIDList = staticmethod(_libtraci.simulation_getEmergencyStoppingVehiclesIDList)
    else:
        getEmergencyStoppingVehiclesIDList = _libtraci.simulation_getEmergencyStoppingVehiclesIDList
    if _newclass:
        getStartingTeleportNumber = staticmethod(_libtraci.simulation_getStartingTeleportNumber)
    else:
        getStartingTeleportNumber = _libtraci.simulation_getStartingTeleportNumber
    if _newclass:
        getStartingTeleportIDList = staticmethod(_libtraci.simulation_getStartingTeleportIDList)
    else:
        getStartingTeleportIDList = _libtraci.simulation_getStartingTeleportIDList
    if _newclass:
        getEndingTeleportNumber = staticmethod(_libtraci.simulation_getEndingTeleportNumber)
    else:
        getEndingTeleportNumber = _libtraci.simulation_getEndingTeleportNumber
    if _newclass:
        getEndingTeleportIDList = staticmethod(_libtraci.simulation_getEndingTeleportIDList)
    else:
        getEndingTeleportIDList = _libtraci.simulation_getEndingTeleportIDList
    if _newclass:
        getBusStopIDList = staticmethod(_libtraci.simulation_getBusStopIDList)
    else:
        getBusStopIDList = _libtraci.simulation_getBusStopIDList
    if _newclass:
        getBusStopWaiting = staticmethod(_libtraci.simulation_getBusStopWaiting)
    else:
        getBusStopWaiting = _libtraci.simulation_getBusStopWaiting
    if _newclass:
        getBusStopWaitingIDList = staticmethod(_libtraci.simulation_getBusStopWaitingIDList)
    else:
        getBusStopWaitingIDList = _libtraci.simulation_getBusStopWaitingIDList
    if _newclass:
        getDeltaT = staticmethod(_libtraci.simulation_getDeltaT)
    else:
        getDeltaT = _libtraci.simulation_getDeltaT
    if _newclass:
        getNetBoundary = staticmethod(_libtraci.simulation_getNetBoundary)
    else:
        getNetBoundary = _libtraci.simulation_getNetBoundary
    if _newclass:
        getMinExpectedNumber = staticmethod(_libtraci.simulation_getMinExpectedNumber)
    else:
        getMinExpectedNumber = _libtraci.simulation_getMinExpectedNumber
    if _newclass:
        clearPending = staticmethod(_libtraci.simulation_clearPending)
    else:
        clearPending = _libtraci.simulation_clearPending
    if _newclass:
        saveState = staticmethod(_libtraci.simulation_saveState)
    else:
        saveState = _libtraci.simulation_saveState
    if _newclass:
        loadState = staticmethod(_libtraci.simulation_loadState)
    else:
        loadState = _libtraci.simulation_loadState
    if _newclass:
        writeMessage = staticmethod(_libtraci.simulation_writeMessage)
    else:
        writeMessage = _libtraci.simulation_writeMessage
    __swig_destroy__ = _libtraci.delete_simulation
    __del__ = lambda self: None
simulation_swigregister = _libtraci.simulation_swigregister
simulation_swigregister(simulation)

def simulation_init(*args, **kwargs):
    return _libtraci.simulation_init(*args, **kwargs)
simulation_init = _libtraci.simulation_init

def simulation_start(*args, **kwargs):
    return _libtraci.simulation_start(*args, **kwargs)
simulation_start = _libtraci.simulation_start

def simulation_isLibsumo():
    return _libtraci.simulation_isLibsumo()
simulation_isLibsumo = _libtraci.simulation_isLibsumo

def simulation_hasGUI():
    return _libtraci.simulation_hasGUI()
simulation_hasGUI = _libtraci.simulation_hasGUI

def simulation_switchConnection(label):
    return _libtraci.simulation_switchConnection(label)
simulation_switchConnection = _libtraci.simulation_switchConnection

def simulation_getLabel():
    return _libtraci.simulation_getLabel()
simulation_getLabel = _libtraci.simulation_getLabel

def simulation_setOrder(order):
    return _libtraci.simulation_setOrder(order)
simulation_setOrder = _libtraci.simulation_setOrder

def simulation_load(args):
    return _libtraci.simulation_load(args)
simulation_load = _libtraci.simulation_load

def simulation_isLoaded():
    return _libtraci.simulation_isLoaded()
simulation_isLoaded = _libtraci.simulation_isLoaded

def simulation_step(time=0.):
    return _libtraci.simulation_step(time)
simulation_step = _libtraci.simulation_step

def simulation_close(*args, **kwargs):
    return _libtraci.simulation_close(*args, **kwargs)
simulation_close = _libtraci.simulation_close

def simulation_getVersion():
    return _libtraci.simulation_getVersion()
simulation_getVersion = _libtraci.simulation_getVersion

def simulation_getCurrentTime():
    return _libtraci.simulation_getCurrentTime()
simulation_getCurrentTime = _libtraci.simulation_getCurrentTime

def simulation_getTime():
    return _libtraci.simulation_getTime()
simulation_getTime = _libtraci.simulation_getTime

def simulation_getLoadedNumber():
    return _libtraci.simulation_getLoadedNumber()
simulation_getLoadedNumber = _libtraci.simulation_getLoadedNumber

def simulation_getLoadedIDList():
    return _libtraci.simulation_getLoadedIDList()
simulation_getLoadedIDList = _libtraci.simulation_getLoadedIDList

def simulation_getDepartedNumber():
    return _libtraci.simulation_getDepartedNumber()
simulation_getDepartedNumber = _libtraci.simulation_getDepartedNumber

def simulation_getDepartedIDList():
    return _libtraci.simulation_getDepartedIDList()
simulation_getDepartedIDList = _libtraci.simulation_getDepartedIDList

def simulation_getArrivedNumber():
    return _libtraci.simulation_getArrivedNumber()
simulation_getArrivedNumber = _libtraci.simulation_getArrivedNumber

def simulation_getArrivedIDList():
    return _libtraci.simulation_getArrivedIDList()
simulation_getArrivedIDList = _libtraci.simulation_getArrivedIDList

def simulation_getParkingStartingVehiclesNumber():
    return _libtraci.simulation_getParkingStartingVehiclesNumber()
simulation_getParkingStartingVehiclesNumber = _libtraci.simulation_getParkingStartingVehiclesNumber

def simulation_getParkingStartingVehiclesIDList():
    return _libtraci.simulation_getParkingStartingVehiclesIDList()
simulation_getParkingStartingVehiclesIDList = _libtraci.simulation_getParkingStartingVehiclesIDList

def simulation_getParkingEndingVehiclesNumber():
    return _libtraci.simulation_getParkingEndingVehiclesNumber()
simulation_getParkingEndingVehiclesNumber = _libtraci.simulation_getParkingEndingVehiclesNumber

def simulation_getParkingEndingVehiclesIDList():
    return _libtraci.simulation_getParkingEndingVehiclesIDList()
simulation_getParkingEndingVehiclesIDList = _libtraci.simulation_getParkingEndingVehiclesIDList

def simulation_getStopStartingVehiclesNumber():
    return _libtraci.simulation_getStopStartingVehiclesNumber()
simulation_getStopStartingVehiclesNumber = _libtraci.simulation_getStopStartingVehiclesNumber

def simulation_getStopStartingVehiclesIDList():
    return _libtraci.simulation_getStopStartingVehiclesIDList()
simulation_getStopStartingVehiclesIDList = _libtraci.simulation_getStopStartingVehiclesIDList

def simulation_getStopEndingVehiclesNumber():
    return _libtraci.simulation_getStopEndingVehiclesNumber()
simulation_getStopEndingVehiclesNumber = _libtraci.simulation_getStopEndingVehiclesNumber

def simulation_getStopEndingVehiclesIDList():
    return _libtraci.simulation_getStopEndingVehiclesIDList()
simulation_getStopEndingVehiclesIDList = _libtraci.simulation_getStopEndingVehiclesIDList

def simulation_getCollidingVehiclesNumber():
    return _libtraci.simulation_getCollidingVehiclesNumber()
simulation_getCollidingVehiclesNumber = _libtraci.simulation_getCollidingVehiclesNumber

def simulation_getCollidingVehiclesIDList():
    return _libtraci.simulation_getCollidingVehiclesIDList()
simulation_getCollidingVehiclesIDList = _libtraci.simulation_getCollidingVehiclesIDList

def simulation_getEmergencyStoppingVehiclesNumber():
    return _libtraci.simulation_getEmergencyStoppingVehiclesNumber()
simulation_getEmergencyStoppingVehiclesNumber = _libtraci.simulation_getEmergencyStoppingVehiclesNumber

def simulation_getEmergencyStoppingVehiclesIDList():
    return _libtraci.simulation_getEmergencyStoppingVehiclesIDList()
simulation_getEmergencyStoppingVehiclesIDList = _libtraci.simulation_getEmergencyStoppingVehiclesIDList

def simulation_getStartingTeleportNumber():
    return _libtraci.simulation_getStartingTeleportNumber()
simulation_getStartingTeleportNumber = _libtraci.simulation_getStartingTeleportNumber

def simulation_getStartingTeleportIDList():
    return _libtraci.simulation_getStartingTeleportIDList()
simulation_getStartingTeleportIDList = _libtraci.simulation_getStartingTeleportIDList

def simulation_getEndingTeleportNumber():
    return _libtraci.simulation_getEndingTeleportNumber()
simulation_getEndingTeleportNumber = _libtraci.simulation_getEndingTeleportNumber

def simulation_getEndingTeleportIDList():
    return _libtraci.simulation_getEndingTeleportIDList()
simulation_getEndingTeleportIDList = _libtraci.simulation_getEndingTeleportIDList

def simulation_getBusStopIDList():
    return _libtraci.simulation_getBusStopIDList()
simulation_getBusStopIDList = _libtraci.simulation_getBusStopIDList

def simulation_getBusStopWaiting(stopID):
    return _libtraci.simulation_getBusStopWaiting(stopID)
simulation_getBusStopWaiting = _libtraci.simulation_getBusStopWaiting

def simulation_getBusStopWaitingIDList(stopID):
    return _libtraci.simulation_getBusStopWaitingIDList(stopID)
simulation_getBusStopWaitingIDList = _libtraci.simulation_getBusStopWaitingIDList

def simulation_getDeltaT():
    return _libtraci.simulation_getDeltaT()
simulation_getDeltaT = _libtraci.simulation_getDeltaT

def simulation_getNetBoundary():
    return _libtraci.simulation_getNetBoundary()
simulation_getNetBoundary = _libtraci.simulation_getNetBoundary

def simulation_getMinExpectedNumber():
    return _libtraci.simulation_getMinExpectedNumber()
simulation_getMinExpectedNumber = _libtraci.simulation_getMinExpectedNumber

def simulation_clearPending(*args, **kwargs):
    return _libtraci.simulation_clearPending(*args, **kwargs)
simulation_clearPending = _libtraci.simulation_clearPending

def simulation_saveState(fileName):
    return _libtraci.simulation_saveState(fileName)
simulation_saveState = _libtraci.simulation_saveState

def simulation_loadState(fileName):
    return _libtraci.simulation_loadState(fileName)
simulation_loadState = _libtraci.simulation_loadState

def simulation_writeMessage(msg):
    return _libtraci.simulation_writeMessage(msg)
simulation_writeMessage = _libtraci.simulation_writeMessage


def wrapAsClassMethod(func, module):
    def wrapper(*args, **kwargs):
        return func(module, *args, **kwargs)
    return wrapper

exceptions.TraCIException = TraCIException
simulation.Stage = TraCIStage
vehicle.StopData = TraCINextStopData
person.Reservation = TraCIReservation
trafficlight.Phase = TraCIPhase
trafficlight.Logic = TraCILogic
vehicle.addFull = vehicle.add
vehicle.addLegacy = wrapAsClassMethod(_vehicle.VehicleDomain.addLegacy, vehicle)
vehicle.couldChangeLane = wrapAsClassMethod(_vehicle.VehicleDomain.couldChangeLane, vehicle)
vehicle.wantsAndCouldChangeLane = wrapAsClassMethod(_vehicle.VehicleDomain.wantsAndCouldChangeLane, vehicle)
vehicle.isStopped = wrapAsClassMethod(_vehicle.VehicleDomain.isStopped, vehicle)
vehicle.setBusStop = wrapAsClassMethod(_vehicle.VehicleDomain.setBusStop, vehicle)
vehicle.setParkingAreaStop = wrapAsClassMethod(_vehicle.VehicleDomain.setParkingAreaStop, vehicle)
vehicle.getRightFollowers = wrapAsClassMethod(_vehicle.VehicleDomain.getRightFollowers, vehicle)
vehicle.getRightLeaders = wrapAsClassMethod(_vehicle.VehicleDomain.getRightLeaders, vehicle)
vehicle.getLeftFollowers = wrapAsClassMethod(_vehicle.VehicleDomain.getLeftFollowers, vehicle)
vehicle.getLeftLeaders = wrapAsClassMethod(_vehicle.VehicleDomain.getLeftLeaders, vehicle)
vehicle.getLaneChangeStatePretty = wrapAsClassMethod(_vehicle.VehicleDomain.getLaneChangeStatePretty, vehicle)
vehicle._legacyGetLeader = True
person.removeStages = wrapAsClassMethod(_person.PersonDomain.removeStages, person)
_trafficlight.TraCIException = TraCIException
trafficlight.setLinkState = wrapAsClassMethod(_trafficlight.TrafficLightDomain.setLinkState, trafficlight)
addStepListener = wrapAsClassMethod(connection.Connection.addStepListener, sys.modules[__name__])
removeStepListener = wrapAsClassMethod(connection.Connection.removeStepListener, sys.modules[__name__])
_manageStepListeners = wrapAsClassMethod(connection.Connection._manageStepListeners, sys.modules[__name__])

# This file is compatible with both classic and new-style classes.

cvar = _libtraci.cvar
TRACI_VERSION = cvar.TRACI_VERSION
CMD_GETVERSION = cvar.CMD_GETVERSION
CMD_LOAD = cvar.CMD_LOAD
CMD_SIMSTEP = cvar.CMD_SIMSTEP
CMD_SETORDER = cvar.CMD_SETORDER
CMD_STOP = cvar.CMD_STOP
CMD_REROUTE_TO_PARKING = cvar.CMD_REROUTE_TO_PARKING
CMD_RESUME = cvar.CMD_RESUME
CMD_CHANGELANE = cvar.CMD_CHANGELANE
CMD_SLOWDOWN = cvar.CMD_SLOWDOWN
CMD_CHANGESUBLANE = cvar.CMD_CHANGESUBLANE
CMD_OPENGAP = cvar.CMD_OPENGAP
CMD_REPLACE_STOP = cvar.CMD_REPLACE_STOP
VAR_TAXI_FLEET = cvar.VAR_TAXI_FLEET
CMD_TAXI_DISPATCH = cvar.CMD_TAXI_DISPATCH
CMD_CHANGETARGET = cvar.CMD_CHANGETARGET
CMD_CLOSE = cvar.CMD_CLOSE
CMD_ADD_SUBSCRIPTION_FILTER = cvar.CMD_ADD_SUBSCRIPTION_FILTER
CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT
CMD_GET_INDUCTIONLOOP_VARIABLE = cvar.CMD_GET_INDUCTIONLOOP_VARIABLE
RESPONSE_GET_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_GET_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_CONTEXT
CMD_GET_MULTIENTRYEXIT_VARIABLE = cvar.CMD_GET_MULTIENTRYEXIT_VARIABLE
RESPONSE_GET_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_GET_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.CMD_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MULTIENTRYEXIT_VARIABLE
CMD_SUBSCRIBE_TL_CONTEXT = cvar.CMD_SUBSCRIBE_TL_CONTEXT
RESPONSE_SUBSCRIBE_TL_CONTEXT = cvar.RESPONSE_SUBSCRIBE_TL_CONTEXT
CMD_GET_TL_VARIABLE = cvar.CMD_GET_TL_VARIABLE
RESPONSE_GET_TL_VARIABLE = cvar.RESPONSE_GET_TL_VARIABLE
CMD_SET_TL_VARIABLE = cvar.CMD_SET_TL_VARIABLE
CMD_SUBSCRIBE_TL_VARIABLE = cvar.CMD_SUBSCRIBE_TL_VARIABLE
RESPONSE_SUBSCRIBE_TL_VARIABLE = cvar.RESPONSE_SUBSCRIBE_TL_VARIABLE
CMD_SUBSCRIBE_LANE_CONTEXT = cvar.CMD_SUBSCRIBE_LANE_CONTEXT
RESPONSE_SUBSCRIBE_LANE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANE_CONTEXT
CMD_GET_LANE_VARIABLE = cvar.CMD_GET_LANE_VARIABLE
RESPONSE_GET_LANE_VARIABLE = cvar.RESPONSE_GET_LANE_VARIABLE
CMD_SET_LANE_VARIABLE = cvar.CMD_SET_LANE_VARIABLE
CMD_SUBSCRIBE_LANE_VARIABLE = cvar.CMD_SUBSCRIBE_LANE_VARIABLE
RESPONSE_SUBSCRIBE_LANE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT
CMD_GET_VEHICLE_VARIABLE = cvar.CMD_GET_VEHICLE_VARIABLE
RESPONSE_GET_VEHICLE_VARIABLE = cvar.RESPONSE_GET_VEHICLE_VARIABLE
CMD_SET_VEHICLE_VARIABLE = cvar.CMD_SET_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT
RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT
CMD_GET_VEHICLETYPE_VARIABLE = cvar.CMD_GET_VEHICLETYPE_VARIABLE
RESPONSE_GET_VEHICLETYPE_VARIABLE = cvar.RESPONSE_GET_VEHICLETYPE_VARIABLE
CMD_SET_VEHICLETYPE_VARIABLE = cvar.CMD_SET_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE
RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE
CMD_SUBSCRIBE_ROUTE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTE_CONTEXT
CMD_GET_ROUTE_VARIABLE = cvar.CMD_GET_ROUTE_VARIABLE
RESPONSE_GET_ROUTE_VARIABLE = cvar.RESPONSE_GET_ROUTE_VARIABLE
CMD_SET_ROUTE_VARIABLE = cvar.CMD_SET_ROUTE_VARIABLE
CMD_SUBSCRIBE_ROUTE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTE_VARIABLE
CMD_SUBSCRIBE_POI_CONTEXT = cvar.CMD_SUBSCRIBE_POI_CONTEXT
RESPONSE_SUBSCRIBE_POI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POI_CONTEXT
CMD_GET_POI_VARIABLE = cvar.CMD_GET_POI_VARIABLE
RESPONSE_GET_POI_VARIABLE = cvar.RESPONSE_GET_POI_VARIABLE
CMD_SET_POI_VARIABLE = cvar.CMD_SET_POI_VARIABLE
CMD_SUBSCRIBE_POI_VARIABLE = cvar.CMD_SUBSCRIBE_POI_VARIABLE
RESPONSE_SUBSCRIBE_POI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POI_VARIABLE
CMD_SUBSCRIBE_POLYGON_CONTEXT = cvar.CMD_SUBSCRIBE_POLYGON_CONTEXT
RESPONSE_SUBSCRIBE_POLYGON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_POLYGON_CONTEXT
CMD_GET_POLYGON_VARIABLE = cvar.CMD_GET_POLYGON_VARIABLE
RESPONSE_GET_POLYGON_VARIABLE = cvar.RESPONSE_GET_POLYGON_VARIABLE
CMD_SET_POLYGON_VARIABLE = cvar.CMD_SET_POLYGON_VARIABLE
CMD_SUBSCRIBE_POLYGON_VARIABLE = cvar.CMD_SUBSCRIBE_POLYGON_VARIABLE
RESPONSE_SUBSCRIBE_POLYGON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_POLYGON_VARIABLE
CMD_SUBSCRIBE_JUNCTION_CONTEXT = cvar.CMD_SUBSCRIBE_JUNCTION_CONTEXT
RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT
CMD_GET_JUNCTION_VARIABLE = cvar.CMD_GET_JUNCTION_VARIABLE
RESPONSE_GET_JUNCTION_VARIABLE = cvar.RESPONSE_GET_JUNCTION_VARIABLE
CMD_SET_JUNCTION_VARIABLE = cvar.CMD_SET_JUNCTION_VARIABLE
CMD_SUBSCRIBE_JUNCTION_VARIABLE = cvar.CMD_SUBSCRIBE_JUNCTION_VARIABLE
RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE
CMD_SUBSCRIBE_EDGE_CONTEXT = cvar.CMD_SUBSCRIBE_EDGE_CONTEXT
RESPONSE_SUBSCRIBE_EDGE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_EDGE_CONTEXT
CMD_GET_EDGE_VARIABLE = cvar.CMD_GET_EDGE_VARIABLE
RESPONSE_GET_EDGE_VARIABLE = cvar.RESPONSE_GET_EDGE_VARIABLE
CMD_SET_EDGE_VARIABLE = cvar.CMD_SET_EDGE_VARIABLE
CMD_SUBSCRIBE_EDGE_VARIABLE = cvar.CMD_SUBSCRIBE_EDGE_VARIABLE
RESPONSE_SUBSCRIBE_EDGE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_EDGE_VARIABLE
CMD_SUBSCRIBE_SIM_CONTEXT = cvar.CMD_SUBSCRIBE_SIM_CONTEXT
RESPONSE_SUBSCRIBE_SIM_CONTEXT = cvar.RESPONSE_SUBSCRIBE_SIM_CONTEXT
CMD_GET_SIM_VARIABLE = cvar.CMD_GET_SIM_VARIABLE
RESPONSE_GET_SIM_VARIABLE = cvar.RESPONSE_GET_SIM_VARIABLE
CMD_SET_SIM_VARIABLE = cvar.CMD_SET_SIM_VARIABLE
CMD_SUBSCRIBE_SIM_VARIABLE = cvar.CMD_SUBSCRIBE_SIM_VARIABLE
RESPONSE_SUBSCRIBE_SIM_VARIABLE = cvar.RESPONSE_SUBSCRIBE_SIM_VARIABLE
CMD_SUBSCRIBE_GUI_CONTEXT = cvar.CMD_SUBSCRIBE_GUI_CONTEXT
RESPONSE_SUBSCRIBE_GUI_CONTEXT = cvar.RESPONSE_SUBSCRIBE_GUI_CONTEXT
CMD_GET_GUI_VARIABLE = cvar.CMD_GET_GUI_VARIABLE
RESPONSE_GET_GUI_VARIABLE = cvar.RESPONSE_GET_GUI_VARIABLE
CMD_SET_GUI_VARIABLE = cvar.CMD_SET_GUI_VARIABLE
CMD_SUBSCRIBE_GUI_VARIABLE = cvar.CMD_SUBSCRIBE_GUI_VARIABLE
RESPONSE_SUBSCRIBE_GUI_VARIABLE = cvar.RESPONSE_SUBSCRIBE_GUI_VARIABLE
CMD_SUBSCRIBE_LANEAREA_CONTEXT = cvar.CMD_SUBSCRIBE_LANEAREA_CONTEXT
RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_LANEAREA_CONTEXT
CMD_GET_LANEAREA_VARIABLE = cvar.CMD_GET_LANEAREA_VARIABLE
RESPONSE_GET_LANEAREA_VARIABLE = cvar.RESPONSE_GET_LANEAREA_VARIABLE
CMD_SUBSCRIBE_LANEAREA_VARIABLE = cvar.CMD_SUBSCRIBE_LANEAREA_VARIABLE
RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_LANEAREA_VARIABLE
CMD_SUBSCRIBE_PERSON_CONTEXT = cvar.CMD_SUBSCRIBE_PERSON_CONTEXT
RESPONSE_SUBSCRIBE_PERSON_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PERSON_CONTEXT
CMD_GET_PERSON_VARIABLE = cvar.CMD_GET_PERSON_VARIABLE
RESPONSE_GET_PERSON_VARIABLE = cvar.RESPONSE_GET_PERSON_VARIABLE
CMD_SET_PERSON_VARIABLE = cvar.CMD_SET_PERSON_VARIABLE
CMD_SUBSCRIBE_PERSON_VARIABLE = cvar.CMD_SUBSCRIBE_PERSON_VARIABLE
RESPONSE_SUBSCRIBE_PERSON_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PERSON_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.CMD_SUBSCRIBE_BUSSTOP_CONTEXT
RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_CONTEXT
CMD_GET_BUSSTOP_VARIABLE = cvar.CMD_GET_BUSSTOP_VARIABLE
RESPONSE_GET_BUSSTOP_VARIABLE = cvar.RESPONSE_GET_BUSSTOP_VARIABLE
CMD_SET_BUSSTOP_VARIABLE = cvar.CMD_SET_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.CMD_SUBSCRIBE_BUSSTOP_VARIABLE
RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE = cvar.RESPONSE_SUBSCRIBE_BUSSTOP_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.CMD_SUBSCRIBE_PARKINGAREA_CONTEXT
RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_CONTEXT
CMD_GET_PARKINGAREA_VARIABLE = cvar.CMD_GET_PARKINGAREA_VARIABLE
RESPONSE_GET_PARKINGAREA_VARIABLE = cvar.RESPONSE_GET_PARKINGAREA_VARIABLE
CMD_SET_PARKINGAREA_VARIABLE = cvar.CMD_SET_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.CMD_SUBSCRIBE_PARKINGAREA_VARIABLE
RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_PARKINGAREA_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_CONTEXT
RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_CONTEXT
CMD_GET_CHARGINGSTATION_VARIABLE = cvar.CMD_GET_CHARGINGSTATION_VARIABLE
RESPONSE_GET_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_GET_CHARGINGSTATION_VARIABLE
CMD_SET_CHARGINGSTATION_VARIABLE = cvar.CMD_SET_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.CMD_SUBSCRIBE_CHARGINGSTATION_VARIABLE
RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CHARGINGSTATION_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.CMD_SUBSCRIBE_ROUTEPROBE_CONTEXT
RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_CONTEXT
CMD_GET_ROUTEPROBE_VARIABLE = cvar.CMD_GET_ROUTEPROBE_VARIABLE
RESPONSE_GET_ROUTEPROBE_VARIABLE = cvar.RESPONSE_GET_ROUTEPROBE_VARIABLE
CMD_SET_ROUTEPROBE_VARIABLE = cvar.CMD_SET_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.CMD_SUBSCRIBE_ROUTEPROBE_VARIABLE
RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_ROUTEPROBE_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.CMD_SUBSCRIBE_CALIBRATOR_CONTEXT
RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_CONTEXT
CMD_GET_CALIBRATOR_VARIABLE = cvar.CMD_GET_CALIBRATOR_VARIABLE
RESPONSE_GET_CALIBRATOR_VARIABLE = cvar.RESPONSE_GET_CALIBRATOR_VARIABLE
CMD_SET_CALIBRATOR_VARIABLE = cvar.CMD_SET_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.CMD_SUBSCRIBE_CALIBRATOR_VARIABLE
RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE = cvar.RESPONSE_SUBSCRIBE_CALIBRATOR_VARIABLE
CMD_SUBSCRIBE_REROUTER_CONTEXT = cvar.CMD_SUBSCRIBE_REROUTER_CONTEXT
RESPONSE_SUBSCRIBE_REROUTER_CONTEXT = cvar.RESPONSE_SUBSCRIBE_REROUTER_CONTEXT
CMD_GET_REROUTER_VARIABLE = cvar.CMD_GET_REROUTER_VARIABLE
RESPONSE_GET_REROUTER_VARIABLE = cvar.RESPONSE_GET_REROUTER_VARIABLE
CMD_SET_REROUTER_VARIABLE = cvar.CMD_SET_REROUTER_VARIABLE
CMD_SUBSCRIBE_REROUTER_VARIABLE = cvar.CMD_SUBSCRIBE_REROUTER_VARIABLE
RESPONSE_SUBSCRIBE_REROUTER_VARIABLE = cvar.RESPONSE_SUBSCRIBE_REROUTER_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_CONTEXT
CMD_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_GET_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_GET_VARIABLESPEEDSIGN_VARIABLE
CMD_SET_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SET_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.CMD_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE = cvar.RESPONSE_SUBSCRIBE_VARIABLESPEEDSIGN_VARIABLE
CMD_SUBSCRIBE_MEANDATA_CONTEXT = cvar.CMD_SUBSCRIBE_MEANDATA_CONTEXT
RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT = cvar.RESPONSE_SUBSCRIBE_MEANDATA_CONTEXT
CMD_GET_MEANDATA_VARIABLE = cvar.CMD_GET_MEANDATA_VARIABLE
RESPONSE_GET_MEANDATA_VARIABLE = cvar.RESPONSE_GET_MEANDATA_VARIABLE
CMD_SUBSCRIBE_MEANDATA_VARIABLE = cvar.CMD_SUBSCRIBE_MEANDATA_VARIABLE
RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE = cvar.RESPONSE_SUBSCRIBE_MEANDATA_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_CONTEXT
RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_CONTEXT
CMD_GET_OVERHEADWIRE_VARIABLE = cvar.CMD_GET_OVERHEADWIRE_VARIABLE
RESPONSE_GET_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_GET_OVERHEADWIRE_VARIABLE
CMD_SET_OVERHEADWIRE_VARIABLE = cvar.CMD_SET_OVERHEADWIRE_VARIABLE
CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.CMD_SUBSCRIBE_OVERHEADWIRE_VARIABLE
RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE = cvar.RESPONSE_SUBSCRIBE_OVERHEADWIRE_VARIABLE
POSITION_LON_LAT = cvar.POSITION_LON_LAT
POSITION_2D = cvar.POSITION_2D
POSITION_LON_LAT_ALT = cvar.POSITION_LON_LAT_ALT
POSITION_3D = cvar.POSITION_3D
POSITION_ROADMAP = cvar.POSITION_ROADMAP
TYPE_POLYGON = cvar.TYPE_POLYGON
TYPE_UBYTE = cvar.TYPE_UBYTE
TYPE_BYTE = cvar.TYPE_BYTE
TYPE_INTEGER = cvar.TYPE_INTEGER
TYPE_DOUBLE = cvar.TYPE_DOUBLE
TYPE_STRING = cvar.TYPE_STRING
TYPE_STRINGLIST = cvar.TYPE_STRINGLIST
TYPE_COMPOUND = cvar.TYPE_COMPOUND
TYPE_DOUBLELIST = cvar.TYPE_DOUBLELIST
TYPE_COLOR = cvar.TYPE_COLOR
RTYPE_OK = cvar.RTYPE_OK
RTYPE_NOTIMPLEMENTED = cvar.RTYPE_NOTIMPLEMENTED
RTYPE_ERR = cvar.RTYPE_ERR
INVALID_DOUBLE_VALUE = cvar.INVALID_DOUBLE_VALUE
INVALID_INT_VALUE = cvar.INVALID_INT_VALUE
MAX_ORDER = cvar.MAX_ORDER
REQUEST_AIRDIST = cvar.REQUEST_AIRDIST
REQUEST_DRIVINGDIST = cvar.REQUEST_DRIVINGDIST
REMOVE_TELEPORT = cvar.REMOVE_TELEPORT
REMOVE_PARKING = cvar.REMOVE_PARKING
REMOVE_ARRIVED = cvar.REMOVE_ARRIVED
REMOVE_VAPORIZED = cvar.REMOVE_VAPORIZED
REMOVE_TELEPORT_ARRIVED = cvar.REMOVE_TELEPORT_ARRIVED
MOVE_AUTOMATIC = cvar.MOVE_AUTOMATIC
MOVE_TELEPORT = cvar.MOVE_TELEPORT
MOVE_NORMAL = cvar.MOVE_NORMAL
STAGE_WAITING_FOR_DEPART = cvar.STAGE_WAITING_FOR_DEPART
STAGE_WAITING = cvar.STAGE_WAITING
STAGE_WALKING = cvar.STAGE_WALKING
STAGE_DRIVING = cvar.STAGE_DRIVING
STAGE_ACCESS = cvar.STAGE_ACCESS
STAGE_TRIP = cvar.STAGE_TRIP
STAGE_TRANSHIP = cvar.STAGE_TRANSHIP
STOP_DEFAULT = cvar.STOP_DEFAULT
STOP_PARKING = cvar.STOP_PARKING
STOP_TRIGGERED = cvar.STOP_TRIGGERED
STOP_CONTAINER_TRIGGERED = cvar.STOP_CONTAINER_TRIGGERED
STOP_BUS_STOP = cvar.STOP_BUS_STOP
STOP_CONTAINER_STOP = cvar.STOP_CONTAINER_STOP
STOP_CHARGING_STATION = cvar.STOP_CHARGING_STATION
STOP_PARKING_AREA = cvar.STOP_PARKING_AREA
STOP_OVERHEAD_WIRE = cvar.STOP_OVERHEAD_WIRE
DEPARTFLAG_TRIGGERED = cvar.DEPARTFLAG_TRIGGERED
DEPARTFLAG_CONTAINER_TRIGGERED = cvar.DEPARTFLAG_CONTAINER_TRIGGERED
DEPARTFLAG_NOW = cvar.DEPARTFLAG_NOW
DEPARTFLAG_SPEED_RANDOM = cvar.DEPARTFLAG_SPEED_RANDOM
DEPARTFLAG_SPEED_MAX = cvar.DEPARTFLAG_SPEED_MAX
DEPARTFLAG_LANE_RANDOM = cvar.DEPARTFLAG_LANE_RANDOM
DEPARTFLAG_LANE_FREE = cvar.DEPARTFLAG_LANE_FREE
DEPARTFLAG_LANE_ALLOWED_FREE = cvar.DEPARTFLAG_LANE_ALLOWED_FREE
DEPARTFLAG_LANE_BEST_FREE = cvar.DEPARTFLAG_LANE_BEST_FREE
DEPARTFLAG_LANE_FIRST_ALLOWED = cvar.DEPARTFLAG_LANE_FIRST_ALLOWED
DEPARTFLAG_POS_RANDOM = cvar.DEPARTFLAG_POS_RANDOM
DEPARTFLAG_POS_FREE = cvar.DEPARTFLAG_POS_FREE
DEPARTFLAG_POS_BASE = cvar.DEPARTFLAG_POS_BASE
DEPARTFLAG_POS_LAST = cvar.DEPARTFLAG_POS_LAST
DEPARTFLAG_POS_RANDOM_FREE = cvar.DEPARTFLAG_POS_RANDOM_FREE
ARRIVALFLAG_LANE_CURRENT = cvar.ARRIVALFLAG_LANE_CURRENT
ARRIVALFLAG_SPEED_CURRENT = cvar.ARRIVALFLAG_SPEED_CURRENT
ARRIVALFLAG_POS_RANDOM = cvar.ARRIVALFLAG_POS_RANDOM
ARRIVALFLAG_POS_MAX = cvar.ARRIVALFLAG_POS_MAX
ROUTING_MODE_DEFAULT = cvar.ROUTING_MODE_DEFAULT
ROUTING_MODE_AGGREGATED = cvar.ROUTING_MODE_AGGREGATED
ROUTING_MODE_EFFORT = cvar.ROUTING_MODE_EFFORT
ROUTING_MODE_COMBINED = cvar.ROUTING_MODE_COMBINED
TRAFFICLIGHT_TYPE_STATIC = cvar.TRAFFICLIGHT_TYPE_STATIC
TRAFFICLIGHT_TYPE_ACTUATED = cvar.TRAFFICLIGHT_TYPE_ACTUATED
TRAFFICLIGHT_TYPE_DELAYBASED = cvar.TRAFFICLIGHT_TYPE_DELAYBASED
FILTER_TYPE_NONE = cvar.FILTER_TYPE_NONE
FILTER_TYPE_LANES = cvar.FILTER_TYPE_LANES
FILTER_TYPE_NOOPPOSITE = cvar.FILTER_TYPE_NOOPPOSITE
FILTER_TYPE_DOWNSTREAM_DIST = cvar.FILTER_TYPE_DOWNSTREAM_DIST
FILTER_TYPE_UPSTREAM_DIST = cvar.FILTER_TYPE_UPSTREAM_DIST
FILTER_TYPE_LEAD_FOLLOW = cvar.FILTER_TYPE_LEAD_FOLLOW
FILTER_TYPE_TURN = cvar.FILTER_TYPE_TURN
FILTER_TYPE_VCLASS = cvar.FILTER_TYPE_VCLASS
FILTER_TYPE_VTYPE = cvar.FILTER_TYPE_VTYPE
FILTER_TYPE_FIELD_OF_VISION = cvar.FILTER_TYPE_FIELD_OF_VISION
FILTER_TYPE_LATERAL_DIST = cvar.FILTER_TYPE_LATERAL_DIST
TRACI_ID_LIST = cvar.TRACI_ID_LIST
ID_COUNT = cvar.ID_COUNT
AUTOMATIC_VARIABLES_SUBSCRIPTION = cvar.AUTOMATIC_VARIABLES_SUBSCRIPTION
AUTOMATIC_CONTEXT_SUBSCRIPTION = cvar.AUTOMATIC_CONTEXT_SUBSCRIPTION
GENERIC_ATTRIBUTE = cvar.GENERIC_ATTRIBUTE
LAST_STEP_VEHICLE_NUMBER = cvar.LAST_STEP_VEHICLE_NUMBER
LAST_STEP_MEAN_SPEED = cvar.LAST_STEP_MEAN_SPEED
LAST_STEP_VEHICLE_ID_LIST = cvar.LAST_STEP_VEHICLE_ID_LIST
LAST_STEP_OCCUPANCY = cvar.LAST_STEP_OCCUPANCY
LAST_STEP_VEHICLE_HALTING_NUMBER = cvar.LAST_STEP_VEHICLE_HALTING_NUMBER
LAST_STEP_LENGTH = cvar.LAST_STEP_LENGTH
LAST_STEP_TIME_SINCE_DETECTION = cvar.LAST_STEP_TIME_SINCE_DETECTION
LAST_STEP_VEHICLE_DATA = cvar.LAST_STEP_VEHICLE_DATA
JAM_LENGTH_VEHICLE = cvar.JAM_LENGTH_VEHICLE
JAM_LENGTH_METERS = cvar.JAM_LENGTH_METERS
LAST_STEP_PERSON_ID_LIST = cvar.LAST_STEP_PERSON_ID_LIST
VAR_NAME = cvar.VAR_NAME
VAR_FOLLOW_SPEED = cvar.VAR_FOLLOW_SPEED
VAR_STOP_SPEED = cvar.VAR_STOP_SPEED
VAR_SECURE_GAP = cvar.VAR_SECURE_GAP
VAR_STOP_DELAY = cvar.VAR_STOP_DELAY
VAR_BEGIN = cvar.VAR_BEGIN
VAR_END = cvar.VAR_END
VAR_VTYPES = cvar.VAR_VTYPES
VAR_VEHSPERHOUR = cvar.VAR_VEHSPERHOUR
VAR_PASSED = cvar.VAR_PASSED
VAR_INSERTED = cvar.VAR_INSERTED
VAR_REMOVED = cvar.VAR_REMOVED
VAR_ROUTE_PROBE = cvar.VAR_ROUTE_PROBE
CMD_SET_FLOW = cvar.CMD_SET_FLOW
TL_RED_YELLOW_GREEN_STATE = cvar.TL_RED_YELLOW_GREEN_STATE
TL_PHASE_INDEX = cvar.TL_PHASE_INDEX
TL_PROGRAM = cvar.TL_PROGRAM
TL_PHASE_DURATION = cvar.TL_PHASE_DURATION
TL_BLOCKING_VEHICLES = cvar.TL_BLOCKING_VEHICLES
TL_CONTROLLED_LANES = cvar.TL_CONTROLLED_LANES
TL_CONTROLLED_LINKS = cvar.TL_CONTROLLED_LINKS
TL_CURRENT_PHASE = cvar.TL_CURRENT_PHASE
TL_CURRENT_PROGRAM = cvar.TL_CURRENT_PROGRAM
TL_RIVAL_VEHICLES = cvar.TL_RIVAL_VEHICLES
TL_PRIORITY_VEHICLES = cvar.TL_PRIORITY_VEHICLES
TL_CONTROLLED_JUNCTIONS = cvar.TL_CONTROLLED_JUNCTIONS
TL_COMPLETE_DEFINITION_RYG = cvar.TL_COMPLETE_DEFINITION_RYG
TL_COMPLETE_PROGRAM_RYG = cvar.TL_COMPLETE_PROGRAM_RYG
TL_NEXT_SWITCH = cvar.TL_NEXT_SWITCH
TL_EXTERNAL_STATE = cvar.TL_EXTERNAL_STATE
LANE_LINK_NUMBER = cvar.LANE_LINK_NUMBER
LANE_EDGE_ID = cvar.LANE_EDGE_ID
LANE_LINKS = cvar.LANE_LINKS
LANE_ALLOWED = cvar.LANE_ALLOWED
LANE_DISALLOWED = cvar.LANE_DISALLOWED
VAR_FOES = cvar.VAR_FOES
VAR_SLOPE = cvar.VAR_SLOPE
VAR_SPEED = cvar.VAR_SPEED
VAR_PREV_SPEED = cvar.VAR_PREV_SPEED
VAR_SPEED_LAT = cvar.VAR_SPEED_LAT
VAR_MAXSPEED = cvar.VAR_MAXSPEED
VAR_POSITION = cvar.VAR_POSITION
VAR_POSITION3D = cvar.VAR_POSITION3D
VAR_ANGLE = cvar.VAR_ANGLE
VAR_LENGTH = cvar.VAR_LENGTH
VAR_COLOR = cvar.VAR_COLOR
VAR_ACCEL = cvar.VAR_ACCEL
VAR_DECEL = cvar.VAR_DECEL
VAR_EMERGENCY_DECEL = cvar.VAR_EMERGENCY_DECEL
VAR_APPARENT_DECEL = cvar.VAR_APPARENT_DECEL
VAR_ACTIONSTEPLENGTH = cvar.VAR_ACTIONSTEPLENGTH
VAR_LASTACTIONTIME = cvar.VAR_LASTACTIONTIME
VAR_TAU = cvar.VAR_TAU
VAR_VEHICLECLASS = cvar.VAR_VEHICLECLASS
VAR_EMISSIONCLASS = cvar.VAR_EMISSIONCLASS
VAR_SHAPECLASS = cvar.VAR_SHAPECLASS
VAR_MINGAP = cvar.VAR_MINGAP
VAR_WIDTH = cvar.VAR_WIDTH
VAR_SHAPE = cvar.VAR_SHAPE
VAR_TYPE = cvar.VAR_TYPE
VAR_ROAD_ID = cvar.VAR_ROAD_ID
VAR_LANE_ID = cvar.VAR_LANE_ID
VAR_LANE_INDEX = cvar.VAR_LANE_INDEX
VAR_ROUTE_ID = cvar.VAR_ROUTE_ID
VAR_EDGES = cvar.VAR_EDGES
VAR_LANES = cvar.VAR_LANES
VAR_UPDATE_BESTLANES = cvar.VAR_UPDATE_BESTLANES
VAR_FILL = cvar.VAR_FILL
VAR_IMAGEFILE = cvar.VAR_IMAGEFILE
VAR_LANEPOSITION = cvar.VAR_LANEPOSITION
VAR_ROUTE = cvar.VAR_ROUTE
VAR_EDGE_TRAVELTIME = cvar.VAR_EDGE_TRAVELTIME
VAR_EDGE_EFFORT = cvar.VAR_EDGE_EFFORT
VAR_CURRENT_TRAVELTIME = cvar.VAR_CURRENT_TRAVELTIME
VAR_SIGNALS = cvar.VAR_SIGNALS
VAR_MOVE_TO = cvar.VAR_MOVE_TO
VAR_ADD_DYNAMICS = cvar.VAR_ADD_DYNAMICS
VAR_HIGHLIGHT = cvar.VAR_HIGHLIGHT
VAR_IMPERFECTION = cvar.VAR_IMPERFECTION
VAR_SPEED_FACTOR = cvar.VAR_SPEED_FACTOR
VAR_SPEED_DEVIATION = cvar.VAR_SPEED_DEVIATION
VAR_ROUTING_MODE = cvar.VAR_ROUTING_MODE
VAR_SPEED_WITHOUT_TRACI = cvar.VAR_SPEED_WITHOUT_TRACI
VAR_BEST_LANES = cvar.VAR_BEST_LANES
VAR_SPEEDSETMODE = cvar.VAR_SPEEDSETMODE
MOVE_TO_XY = cvar.MOVE_TO_XY
VAR_STOPSTATE = cvar.VAR_STOPSTATE
VAR_LANECHANGE_MODE = cvar.VAR_LANECHANGE_MODE
VAR_ALLOWED_SPEED = cvar.VAR_ALLOWED_SPEED
VAR_LANEPOSITION_LAT = cvar.VAR_LANEPOSITION_LAT
VAR_LATALIGNMENT = cvar.VAR_LATALIGNMENT
VAR_MAXSPEED_LAT = cvar.VAR_MAXSPEED_LAT
VAR_MINGAP_LAT = cvar.VAR_MINGAP_LAT
VAR_HEIGHT = cvar.VAR_HEIGHT
VAR_LINE = cvar.VAR_LINE
VAR_VIA = cvar.VAR_VIA
VAR_NEIGHBORS = cvar.VAR_NEIGHBORS
VAR_CO2EMISSION = cvar.VAR_CO2EMISSION
VAR_COEMISSION = cvar.VAR_COEMISSION
VAR_HCEMISSION = cvar.VAR_HCEMISSION
VAR_PMXEMISSION = cvar.VAR_PMXEMISSION
VAR_NOXEMISSION = cvar.VAR_NOXEMISSION
VAR_FUELCONSUMPTION = cvar.VAR_FUELCONSUMPTION
VAR_NOISEEMISSION = cvar.VAR_NOISEEMISSION
VAR_PERSON_NUMBER = cvar.VAR_PERSON_NUMBER
VAR_PERSON_CAPACITY = cvar.VAR_PERSON_CAPACITY
VAR_BUS_STOP_ID_LIST = cvar.VAR_BUS_STOP_ID_LIST
VAR_BUS_STOP_WAITING = cvar.VAR_BUS_STOP_WAITING
VAR_BUS_STOP_WAITING_IDS = cvar.VAR_BUS_STOP_WAITING_IDS
VAR_LEADER = cvar.VAR_LEADER
VAR_FOLLOWER = cvar.VAR_FOLLOWER
VAR_ROUTE_INDEX = cvar.VAR_ROUTE_INDEX
VAR_WAITING_TIME = cvar.VAR_WAITING_TIME
VAR_ACCUMULATED_WAITING_TIME = cvar.VAR_ACCUMULATED_WAITING_TIME
VAR_NEXT_TLS = cvar.VAR_NEXT_TLS
VAR_NEXT_STOPS = cvar.VAR_NEXT_STOPS
VAR_NEXT_STOPS2 = cvar.VAR_NEXT_STOPS2
VAR_ACCELERATION = cvar.VAR_ACCELERATION
VAR_ARRIVALPOS = cvar.VAR_ARRIVALPOS
VAR_ARRIVALLANE = cvar.VAR_ARRIVALLANE
VAR_ARRIVALSPEED = cvar.VAR_ARRIVALSPEED
CMD_MESSAGE = cvar.CMD_MESSAGE
VAR_TIME = cvar.VAR_TIME
VAR_TIME_STEP = cvar.VAR_TIME_STEP
VAR_ELECTRICITYCONSUMPTION = cvar.VAR_ELECTRICITYCONSUMPTION
VAR_LOADED_VEHICLES_NUMBER = cvar.VAR_LOADED_VEHICLES_NUMBER
VAR_LOADED_VEHICLES_IDS = cvar.VAR_LOADED_VEHICLES_IDS
VAR_DEPARTED_VEHICLES_NUMBER = cvar.VAR_DEPARTED_VEHICLES_NUMBER
VAR_DEPARTED_VEHICLES_IDS = cvar.VAR_DEPARTED_VEHICLES_IDS
VAR_TELEPORT_STARTING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_STARTING_VEHICLES_NUMBER
VAR_TELEPORT_STARTING_VEHICLES_IDS = cvar.VAR_TELEPORT_STARTING_VEHICLES_IDS
VAR_TELEPORT_ENDING_VEHICLES_NUMBER = cvar.VAR_TELEPORT_ENDING_VEHICLES_NUMBER
VAR_TELEPORT_ENDING_VEHICLES_IDS = cvar.VAR_TELEPORT_ENDING_VEHICLES_IDS
VAR_ARRIVED_VEHICLES_NUMBER = cvar.VAR_ARRIVED_VEHICLES_NUMBER
VAR_ARRIVED_VEHICLES_IDS = cvar.VAR_ARRIVED_VEHICLES_IDS
VAR_DELTA_T = cvar.VAR_DELTA_T
VAR_NET_BOUNDING_BOX = cvar.VAR_NET_BOUNDING_BOX
VAR_MIN_EXPECTED_VEHICLES = cvar.VAR_MIN_EXPECTED_VEHICLES
VAR_STOP_STARTING_VEHICLES_NUMBER = cvar.VAR_STOP_STARTING_VEHICLES_NUMBER
VAR_STOP_STARTING_VEHICLES_IDS = cvar.VAR_STOP_STARTING_VEHICLES_IDS
VAR_STOP_ENDING_VEHICLES_NUMBER = cvar.VAR_STOP_ENDING_VEHICLES_NUMBER
VAR_STOP_ENDING_VEHICLES_IDS = cvar.VAR_STOP_ENDING_VEHICLES_IDS
VAR_PARKING_STARTING_VEHICLES_NUMBER = cvar.VAR_PARKING_STARTING_VEHICLES_NUMBER
VAR_PARKING_STARTING_VEHICLES_IDS = cvar.VAR_PARKING_STARTING_VEHICLES_IDS
VAR_PARKING_MANEUVERING_VEHICLES_NUMBER = cvar.VAR_PARKING_MANEUVERING_VEHICLES_NUMBER
VAR_PARKING_MANEUVERING_VEHICLES_IDS = cvar.VAR_PARKING_MANEUVERING_VEHICLES_IDS
VAR_PARKING_ENDING_VEHICLES_NUMBER = cvar.VAR_PARKING_ENDING_VEHICLES_NUMBER
VAR_PARKING_ENDING_VEHICLES_IDS = cvar.VAR_PARKING_ENDING_VEHICLES_IDS
VAR_COLLIDING_VEHICLES_NUMBER = cvar.VAR_COLLIDING_VEHICLES_NUMBER
VAR_COLLIDING_VEHICLES_IDS = cvar.VAR_COLLIDING_VEHICLES_IDS
VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_NUMBER
VAR_EMERGENCYSTOPPING_VEHICLES_IDS = cvar.VAR_EMERGENCYSTOPPING_VEHICLES_IDS
CMD_CLEAR_PENDING_VEHICLES = cvar.CMD_CLEAR_PENDING_VEHICLES
CMD_SAVE_SIMSTATE = cvar.CMD_SAVE_SIMSTATE
CMD_LOAD_SIMSTATE = cvar.CMD_LOAD_SIMSTATE
VAR_PARAMETER = cvar.VAR_PARAMETER
VAR_PARAMETER_WITH_KEY = cvar.VAR_PARAMETER_WITH_KEY
ADD = cvar.ADD
REMOVE = cvar.REMOVE
COPY = cvar.COPY
POSITION_CONVERSION = cvar.POSITION_CONVERSION
DISTANCE_REQUEST = cvar.DISTANCE_REQUEST
VAR_DISTANCE = cvar.VAR_DISTANCE
ADD_FULL = cvar.ADD_FULL
FIND_ROUTE = cvar.FIND_ROUTE
FIND_INTERMODAL_ROUTE = cvar.FIND_INTERMODAL_ROUTE
CMD_REROUTE_TRAVELTIME = cvar.CMD_REROUTE_TRAVELTIME
CMD_REROUTE_EFFORT = cvar.CMD_REROUTE_EFFORT
VAR_ROUTE_VALID = cvar.VAR_ROUTE_VALID
VAR_STAGE = cvar.VAR_STAGE
VAR_NEXT_EDGE = cvar.VAR_NEXT_EDGE
VAR_STAGES_REMAINING = cvar.VAR_STAGES_REMAINING
VAR_VEHICLE = cvar.VAR_VEHICLE
APPEND_STAGE = cvar.APPEND_STAGE
REPLACE_STAGE = cvar.REPLACE_STAGE
REMOVE_STAGE = cvar.REMOVE_STAGE
VAR_TAXI_RESERVATIONS = cvar.VAR_TAXI_RESERVATIONS
VAR_SAMPLE_LAST = cvar.VAR_SAMPLE_LAST
VAR_SAMPLE_CURRENT = cvar.VAR_SAMPLE_CURRENT
VAR_VIEW_ZOOM = cvar.VAR_VIEW_ZOOM
VAR_VIEW_OFFSET = cvar.VAR_VIEW_OFFSET
VAR_VIEW_SCHEMA = cvar.VAR_VIEW_SCHEMA
VAR_VIEW_BOUNDARY = cvar.VAR_VIEW_BOUNDARY
VAR_SELECT = cvar.VAR_SELECT
VAR_SCREENSHOT = cvar.VAR_SCREENSHOT
VAR_TRACK_VEHICLE = cvar.VAR_TRACK_VEHICLE
VAR_HAS_VIEW = cvar.VAR_HAS_VIEW

